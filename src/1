Checking OuyaController.cpp ...
Checking OuyaController.cpp: __ANDROID__...
1/39 files checked 0% done
Checking button.cpp ...
button.cpp:201:10: warning: Member variable 'vbutton::fun' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:201:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:201:10: warning: Member variable 'vbutton::hotkey' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:201:10: warning: Member variable 'vbutton::color' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:201:10: warning: Member variable 'vbutton::hidden' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:201:10: warning: Member variable 'vbutton::no_draw' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:109:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton(Sint32 xpos, Sint32 ypos, Sint32 wide, Sint32 high,
         ^
button.cpp:138:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton(Sint32 xpos, Sint32 ypos, Sint32 wide, Sint32 high,
         ^
button.cpp:167:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton(Sint32 xpos, Sint32 ypos, Sint32 wide, Sint32 high,
         ^
button.cpp:112:5: performance: Variable 'arg' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    arg = pass;
    ^
button.cpp:114:5: performance: Variable 'myfunc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    myfunc = 0;
    ^
button.cpp:115:5: performance: Variable 'xloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    xloc = xpos;
    ^
button.cpp:116:5: performance: Variable 'yloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    yloc = ypos;
    ^
button.cpp:117:5: performance: Variable 'width' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    width = wide;
    ^
button.cpp:118:5: performance: Variable 'height' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    height = high;
    ^
button.cpp:121:5: performance: Variable 'label' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    label = msg;
    ^
button.cpp:141:5: performance: Variable 'arg' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    arg = pass;
    ^
button.cpp:143:5: performance: Variable 'myfunc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    myfunc = func_code;
    ^
button.cpp:144:5: performance: Variable 'xloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    xloc = xpos;
    ^
button.cpp:145:5: performance: Variable 'yloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    yloc = ypos;
    ^
button.cpp:146:5: performance: Variable 'width' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    width = wide;
    ^
button.cpp:147:5: performance: Variable 'height' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    height = high;
    ^
button.cpp:150:5: performance: Variable 'label' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    label = msg;
    ^
button.cpp:171:5: performance: Variable 'arg' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    arg = pass;
    ^
button.cpp:173:5: performance: Variable 'myfunc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    myfunc = func_code;
    ^
button.cpp:174:5: performance: Variable 'xloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    xloc = xpos;
    ^
button.cpp:175:5: performance: Variable 'yloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    yloc = ypos;
    ^
button.cpp:176:5: performance: Variable 'width' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    width = wide;
    ^
button.cpp:177:5: performance: Variable 'height' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    height = high;
    ^
button.cpp:180:5: performance: Variable 'label' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    label = msg;
    ^
text.h:32:3: style: Class 'text' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  text(const char * filename);
  ^
input.h:169:5: style: Class 'JoyData' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    JoyData(int index);
    ^
soundob.h:49:3: style: Class 'soundob' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  soundob(bool silent);
  ^
pixie.h:27:3: style: Class 'pixie' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  pixie(const PixieData& data);
  ^
pixien.h:28:3: style: Class 'pixieN' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  pixieN(const PixieData& data);
  ^
level_data.h:56:5: style: Class 'CampaignData' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    CampaignData(const std::string& id);
    ^
level_data.h:102:5: style: Class 'LevelData' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    LevelData(int id);
    ^
walker.h:31:3: style: Class 'walker' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  walker(const PixieData& data);
  ^
screen.h:39:3: style: Class 'screen' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  screen(short howmany);
  ^
walker.h:34:9: style: The function 'move' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short move(short x, short y);
        ^
pixie.h:31:17: note: Virtual function in base class
  virtual short move (short x, short y);
                ^
walker.h:34:9: note: Function in derived class
  short move(short x, short y);
        ^
button.cpp:432:17: style: Variable 'mymouse' can be declared with const [constVariable]
    MouseState& mymouse = query_mouse();
                ^
button.cpp:321:20: style: Variable 'retvalue' is assigned a value that is never used. [unreadVariable]
    Sint32 retvalue=0;
                   ^
button.cpp:351:20: style: Variable 'retvalue' is assigned a value that is never used. [unreadVariable]
    Sint32 retvalue=0;
                   ^
button.cpp:411:21: style: Variable 'whichbutton' is assigned a value that is never used. [unreadVariable]
        whichbutton = 1;
                    ^
Checking button.cpp: OUYA...
Checking button.cpp: USE_TOUCH_INPUT...
2/39 files checked 2% done
Checking campaign_picker.cpp ...
campaign_picker.cpp:142:13: warning: Class 'CampaignEntry' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
            icon = new pixie(icondata);
            ^
campaign_picker.cpp:142:13: warning: Class 'CampaignEntry' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
            icon = new pixie(icondata);
            ^
stats.h:56:3: style: Class 'statistics' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  statistics(walker  *);
  ^
guy.h:30:3: style: Class 'guy' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  guy (int whatfamily);
  ^
campaign_picker.cpp:309:17: style: Local variable 'i' shadows outer variable [shadowVariable]
        for(int i=0; i<MAX_TEAM_SIZE; i++)
                ^
campaign_picker.cpp:290:9: note: Shadowed declaration
    int i = 0;
        ^
campaign_picker.cpp:309:17: note: Shadow variable
        for(int i=0; i<MAX_TEAM_SIZE; i++)
                ^
campaign_picker.cpp:328:41: style: Argument 'area.x-30-20' to function Sint16 is always 94 [constArgument]
    SDL_Rect prev = {Sint16(area.x - 30 - 20), Sint16(area.y), 30, 10};
                                        ^
campaign_picker.cpp:320:12: note: area.x is assigned value 144
    area.x = 160 - 16;
           ^
campaign_picker.cpp:328:41: note: Argument 'area.x-30-20' to function Sint16 is always 94
    SDL_Rect prev = {Sint16(area.x - 30 - 20), Sint16(area.y), 30, 10};
                                        ^
campaign_picker.cpp:331:41: style: Argument 'screenW/2+20' to function Sint16 is always 220 [constArgument]
    SDL_Rect choose = {Sint16(screenW/2 + 20), Sint16(screenH - 15), 30, 10};
                                        ^
campaign_picker.cpp:326:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
campaign_picker.cpp:331:41: note: Argument 'screenW/2+20' to function Sint16 is always 220
    SDL_Rect choose = {Sint16(screenW/2 + 20), Sint16(screenH - 15), 30, 10};
                                        ^
campaign_picker.cpp:331:63: style: Argument 'screenH-15' to function Sint16 is always 285 [constArgument]
    SDL_Rect choose = {Sint16(screenW/2 + 20), Sint16(screenH - 15), 30, 10};
                                                              ^
campaign_picker.cpp:327:22: note: Assignment 'screenH=SCREEN_H', assigned value is 300
    Sint16 screenH = SCREEN_H;
                     ^
campaign_picker.cpp:331:63: note: Argument 'screenH-15' to function Sint16 is always 285
    SDL_Rect choose = {Sint16(screenW/2 + 20), Sint16(screenH - 15), 30, 10};
                                                              ^
campaign_picker.cpp:332:46: style: Argument 'screenW/2-38-20' to function Sint16 is always 142 [constArgument]
    SDL_Rect cancel = {Sint16(screenW/2 - 38 - 20), Sint16(screenH - 15), 38, 10};
                                             ^
campaign_picker.cpp:326:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
campaign_picker.cpp:332:46: note: Argument 'screenW/2-38-20' to function Sint16 is always 142
    SDL_Rect cancel = {Sint16(screenW/2 - 38 - 20), Sint16(screenH - 15), 38, 10};
                                             ^
campaign_picker.cpp:332:68: style: Argument 'screenH-15' to function Sint16 is always 285 [constArgument]
    SDL_Rect cancel = {Sint16(screenW/2 - 38 - 20), Sint16(screenH - 15), 38, 10};
                                                                   ^
campaign_picker.cpp:327:22: note: Assignment 'screenH=SCREEN_H', assigned value is 300
    Sint16 screenH = SCREEN_H;
                     ^
campaign_picker.cpp:332:68: note: Argument 'screenH-15' to function Sint16 is always 285
    SDL_Rect cancel = {Sint16(screenW/2 - 38 - 20), Sint16(screenH - 15), 38, 10};
                                                                   ^
campaign_picker.cpp:333:46: style: Argument 'screenW-50' to function Sint16 is always 350 [constArgument]
    SDL_Rect delete_button = {Sint16(screenW - 50), 10, 38, 10};
                                             ^
campaign_picker.cpp:326:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
campaign_picker.cpp:333:46: note: Argument 'screenW-50' to function Sint16 is always 350
    SDL_Rect delete_button = {Sint16(screenW - 50), 10, 38, 10};
                                             ^
campaign_picker.cpp:291:93: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = campaign_ids.begin(); e != campaign_ids.end(); e++)
                                                                                            ^
campaign_picker.cpp:462:99: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
               for(std::vector<CampaignEntry*>::iterator e = entries.begin(); e != entries.end(); e++)
                                                                                                  ^
campaign_picker.cpp:470:105: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                for(std::list<std::string>::iterator e = campaign_ids.begin(); e != campaign_ids.end(); e++)
                                                                                                        ^
campaign_picker.cpp:587:88: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::vector<CampaignEntry*>::iterator e = entries.begin(); e != entries.end(); e++)
                                                                                       ^
Checking campaign_picker.cpp: OUYA...
Checking campaign_picker.cpp: USE_TOUCH_INPUT...
3/39 files checked 4% done
Checking effect.cpp ...
effect.h:32:3: style: Class 'effect' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  effect(const PixieData& data);
  ^
effect.h:34:9: style: The function 'act' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short act();
        ^
walker.h:50:17: note: Virtual function in base class
  virtual short act();
                ^
effect.h:34:9: note: Function in derived class
  short act();
        ^
effect.h:35:9: style: The function 'animate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short animate();
        ^
walker.h:58:17: note: Virtual function in base class
  virtual short animate();
                ^
effect.h:35:9: note: Function in derived class
  short animate();
        ^
effect.h:36:9: style: The function 'death' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short death(); // called on destruction
        ^
walker.h:82:17: note: Virtual function in base class
  virtual short death(); // called when death/destruction occurs ..
                ^
effect.h:36:9: note: Function in derived class
  short death(); // called on destruction
        ^
effect.h:37:8: style: The function 'query_order' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  char query_order()
       ^
walker.h:60:16: note: Virtual function in base class
  virtual char query_order()
               ^
effect.h:37:8: note: Function in derived class
  char query_order()
       ^
effect.cpp:48:8: style: The scope of the variable 'numfoes' can be reduced. [variableScope]
 short numfoes;
       ^
Checking effect.cpp: OUYA...
Checking effect.cpp: USE_TOUCH_INPUT...
4/39 files checked 5% done
Checking game.cpp ...
living.h:28:3: style: Class 'living' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  living(const PixieData& data);
  ^
weap.h:28:3: style: Class 'weap' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  weap(const PixieData& data);
  ^
treasure.h:28:3: style: Class 'treasure' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  treasure(const PixieData& data);
  ^
living.h:30:18: style: The function 'act' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short          act();
                 ^
walker.h:50:17: note: Virtual function in base class
  virtual short act();
                ^
living.h:30:18: note: Function in derived class
  short          act();
                 ^
living.h:31:18: style: The function 'check_special' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short          check_special(); // determine if we should do special ..
                 ^
walker.h:85:17: note: Virtual function in base class
  virtual short check_special();
                ^
living.h:31:18: note: Function in derived class
  short          check_special(); // determine if we should do special ..
                 ^
living.h:32:18: style: The function 'collide' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short          collide(walker  *ob);
                 ^
walker.h:56:17: note: Virtual function in base class
  virtual short collide(walker  *ob);
                ^
living.h:32:18: note: Function in derived class
  short          collide(walker  *ob);
                 ^
living.h:34:18: style: The function 'do_summon' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  walker*        do_summon(char whatfamily, unsigned short lifetime);
                 ^
walker.h:84:20: note: Virtual function in base class
  virtual walker  *do_summon(char whatfamily, unsigned short lifetime);
                   ^
living.h:34:18: note: Function in derived class
  walker*        do_summon(char whatfamily, unsigned short lifetime);
                 ^
living.h:35:18: style: The function 'facing' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short          facing(short x, short y);
                 ^
walker.h:90:17: note: Virtual function in base class
  virtual short facing(short x, short y);
                ^
living.h:35:18: note: Function in derived class
  short          facing(short x, short y);
                 ^
living.h:36:18: style: The function 'set_difficulty' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void           set_difficulty(Uint32 whatlevel);
                 ^
walker.h:87:16: note: Virtual function in base class
  virtual void set_difficulty(Uint32 whatlevel);
               ^
living.h:36:18: note: Function in derived class
  void           set_difficulty(Uint32 whatlevel);
                 ^
living.h:37:18: style: The function 'shove' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short          shove(walker  *target, short x, short y);
                 ^
walker.h:75:17: note: Virtual function in base class
  virtual short shove(walker  *target, short x, short y);
                ^
living.h:37:18: note: Function in derived class
  short          shove(walker  *target, short x, short y);
                 ^
living.h:38:18: style: The function 'query_order' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  char           query_order()
                 ^
walker.h:60:16: note: Virtual function in base class
  virtual char query_order()
               ^
living.h:38:18: note: Function in derived class
  char           query_order()
                 ^
living.h:42:16: style: The function 'walk' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  virtual bool walk(float x, float y);
               ^
walker.h:40:16: note: Virtual function in base class
  virtual bool walk(float x, float y);
               ^
living.h:42:16: note: Function in derived class
  virtual bool walk(float x, float y);
               ^
living.h:44:9: style: The function 'act_random' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short act_random();
        ^
walker.h:188:17: note: Virtual function in base class
  virtual short act_random();
                ^
living.h:44:9: note: Function in derived class
  short act_random();
        ^
weap.h:31:9: style: The function 'act' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short act();
        ^
walker.h:50:17: note: Virtual function in base class
  virtual short act();
                ^
weap.h:31:9: note: Function in derived class
  short act();
        ^
weap.h:32:9: style: The function 'animate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short animate();
        ^
walker.h:58:17: note: Virtual function in base class
  virtual short animate();
                ^
weap.h:32:9: note: Function in derived class
  short animate();
        ^
weap.h:33:9: style: The function 'death' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short death(); // called on destruction
        ^
walker.h:82:17: note: Virtual function in base class
  virtual short death(); // called when death/destruction occurs ..
                ^
weap.h:33:9: note: Function in derived class
  short death(); // called on destruction
        ^
weap.h:34:9: style: The function 'setxy' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short setxy(short x, short y);
        ^
walker.h:36:17: note: Virtual function in base class
  virtual short setxy(short x, short y);
                ^
weap.h:34:9: note: Function in derived class
  short setxy(short x, short y);
        ^
weap.h:35:9: style: The function 'query_order' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  char  query_order()
        ^
walker.h:60:16: note: Virtual function in base class
  virtual char query_order()
               ^
weap.h:35:9: note: Function in derived class
  char  query_order()
        ^
treasure.h:30:18: style: The function 'act' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short          act();
                 ^
walker.h:50:17: note: Virtual function in base class
  virtual short act();
                ^
treasure.h:30:18: note: Function in derived class
  short          act();
                 ^
treasure.h:32:18: style: The function 'eat_me' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  short          eat_me(walker  * eater);
                 ^
walker.h:76:17: note: Virtual function in base class
  virtual short eat_me(walker  *eater);
                ^
treasure.h:32:18: note: Function in derived class
  short          eat_me(walker  * eater);
                 ^
treasure.h:34:16: style: The function 'set_direct_frame' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void         set_direct_frame(short whatframe);
               ^
walker.h:77:16: note: Virtual function in base class
  virtual void set_direct_frame(short whichframe);
               ^
treasure.h:34:16: note: Function in derived class
  void         set_direct_frame(short whatframe);
               ^
treasure.h:35:16: style: The function 'query_order' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  char         query_order()
               ^
walker.h:60:16: note: Virtual function in base class
  virtual char query_order()
               ^
treasure.h:35:16: note: Function in derived class
  char         query_order()
               ^
game.cpp:28:17: style: The scope of the variable 'temp_walker' can be reduced. [variableScope]
 walker        *temp_walker,  *replace_walker;
                ^
game.cpp:29:16: style: The scope of the variable 'myord' can be reduced. [variableScope]
 short         myord, myfam;
               ^
game.cpp:29:23: style: The scope of the variable 'myfam' can be reduced. [variableScope]
 short         myord, myfam;
                      ^
game.cpp:68:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i = 0; i < myscreen->save_data.team_size; i++)
         ^
game.cpp:31:16: note: Shadowed declaration
 int           i;
               ^
game.cpp:68:10: note: Shadow variable
 for(int i = 0; i < myscreen->save_data.team_size; i++)
         ^
Checking game.cpp: OUYA...
Checking game.cpp: USE_TOUCH_INPUT...
5/39 files checked 6% done
Checking glad.cpp ...
glad.cpp:716:22: warning: Either the condition 'control' is redundant or there is possible null pointer dereference: control. [nullPointerRedundantCheck]
    if (scorecountup[control->team_num] > myscore)
                     ^
glad.cpp:712:9: note: Assuming that condition 'control' is not redundant
    if (control)
        ^
glad.cpp:716:22: note: Null pointer dereference
    if (scorecountup[control->team_num] > myscore)
                     ^
glad.cpp:562:11: style: The scope of the variable 'control' can be reduced. [variableScope]
 walker  *control;
          ^
glad.cpp:563:8: style: The scope of the variable 'lm' can be reduced. [variableScope]
 short lm, tm; // left and top margins
       ^
glad.cpp:563:12: style: The scope of the variable 'tm' can be reduced. [variableScope]
 short lm, tm; // left and top margins
           ^
glad.cpp:564:8: style: The scope of the variable 'rm' can be reduced. [variableScope]
 short rm, bm; // right and bottom margins
       ^
glad.cpp:824:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 short i, j;
       ^
glad.cpp:824:11: style: The scope of the variable 'j' can be reduced. [variableScope]
 short i, j;
          ^
glad.cpp:358:22: style: Variable 'bar_remainder' is assigned a value that is never used. [unreadVariable]
 short bar_remainder = totallength - bar_length;
                     ^
glad.cpp:484:18: style: Variable 'bar_length' is assigned a value that is never used. [unreadVariable]
 short bar_length=0;
                 ^
glad.cpp:553:17: style: Variable 'tempfoes' is assigned a value that is never used. [unreadVariable]
 short tempfoes = 0;
                ^
glad.cpp:555:19: style: Variable 'tempallies' is assigned a value that is never used. [unreadVariable]
 short tempallies = 0;
                  ^
Checking glad.cpp: OUYA...
Checking glad.cpp: REDUCE_OVERSCAN...
Checking glad.cpp: USE_TOUCH_INPUT...
glad.cpp:703:9: style: Local variable 'bm' shadows outer variable [shadowVariable]
    int bm = tm + 54;
        ^
glad.cpp:564:12: note: Shadowed declaration
 short rm, bm; // right and bottom margins
           ^
glad.cpp:703:9: note: Shadow variable
    int bm = tm + 54;
        ^
6/39 files checked 8% done
Checking gloader.cpp ...
gloader.cpp:341:2: warning: Class 'loader' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
 graphics = new PixieData[SIZE_ORDERS*SIZE_FAMILIES];
 ^
gloader.cpp:341:2: warning: Class 'loader' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
 graphics = new PixieData[SIZE_ORDERS*SIZE_FAMILIES];
 ^
gloader.cpp:523:45: style: Variable 'act_types[21*1+15]' is reassigned a value before the old one has been used. [redundantAssignment]
 act_types[PIX(ORDER_WEAPON, FAMILY_WAVE3)] = ACT_FIRE;
                                            ^
gloader.cpp:522:45: note: act_types[21*1+15] is assigned
 act_types[PIX(ORDER_WEAPON, FAMILY_WAVE3)] = ACT_FIRE;
                                            ^
gloader.cpp:523:45: note: act_types[21*1+15] is overwritten
 act_types[PIX(ORDER_WEAPON, FAMILY_WAVE3)] = ACT_FIRE;
                                            ^
Checking gloader.cpp: OUYA...
Checking gloader.cpp: USE_TOUCH_INPUT...
7/39 files checked 13% done
Checking gparser.cpp ...
gparser.cpp:179:34: style: Parameter 'argc' can be declared with const [constParameter]
void cfg_store::commandline(int &argc, char **&argv)
                                 ^
gparser.cpp:179:48: style: Parameter 'argv' can be declared with const [constParameter]
void cfg_store::commandline(int &argc, char **&argv)
                                               ^
Checking gparser.cpp: OUYA...
Checking gparser.cpp: USE_TOUCH_INPUT...
Checking gparser.cpp: _MSC_VER...
8/39 files checked 13% done
Checking graphlib.cpp ...
Checking graphlib.cpp: OUYA...
Checking graphlib.cpp: USE_TOUCH_INPUT...
9/39 files checked 14% done
Checking guy.cpp ...
guy.cpp:71:2: performance: Variable 'level_kills' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 level_kills = 0;
 ^
guy.cpp:72:2: performance: Variable 'total_damage' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 total_damage = total_hits = total_shots = 0;
 ^
guy.cpp:72:17: performance: Variable 'total_hits' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 total_damage = total_hits = total_shots = 0;
                ^
guy.cpp:72:30: performance: Variable 'total_shots' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 total_damage = total_hits = total_shots = 0;
                             ^
guy.cpp:73:2: performance: Variable 'exp' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 exp = 0;
 ^
guy.cpp:338:47: style: Same expression used in consecutive assignments of 'c' and 'i'. [duplicateAssignExpression]
    short s = 8*level_diff, d = 6*level_diff, c = 8*level_diff, i = 8*level_diff, a = 1*level_diff;
                                              ^
guy.cpp:338:65: note: Same expression used in consecutive assignments of 'c' and 'i'.
    short s = 8*level_diff, d = 6*level_diff, c = 8*level_diff, i = 8*level_diff, a = 1*level_diff;
                                                                ^
guy.cpp:338:47: note: Same expression used in consecutive assignments of 'c' and 'i'.
    short s = 8*level_diff, d = 6*level_diff, c = 8*level_diff, i = 8*level_diff, a = 1*level_diff;
                                              ^
Checking guy.cpp: OUYA...
Checking guy.cpp: USE_TOUCH_INPUT...
10/39 files checked 16% done
Checking help.cpp ...
help.cpp:40:8: style: The scope of the variable 'readvalue' can be reduced. [variableScope]
 short readvalue;
       ^
help.cpp:334:8: style: The scope of the variable 'someline' can be reduced. [variableScope]
 char *someline;
       ^
help.cpp:75:21: style: Variable 'key_presses' is assigned a value that is never used. [unreadVariable]
 Sint32 key_presses = 0;
                    ^
Checking help.cpp: OUYA...
Checking help.cpp: USE_TOUCH_INPUT...
11/39 files checked 17% done
Checking input.cpp ...
input.cpp:906:10: warning: Member variable 'JoyData::key_type' is not initialized in the constructor. [uninitMemberVar]
JoyData::JoyData()
         ^
input.cpp:906:10: warning: Member variable 'JoyData::key_index' is not initialized in the constructor. [uninitMemberVar]
JoyData::JoyData()
         ^
input.cpp:347:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
Checking input.cpp: FAKE_TOUCH_EVENTS;USE_TOUCH_INPUT...
Checking input.cpp: OUYA...
Checking input.cpp: USE_TOUCH_INPUT...
12/39 files checked 21% done
Checking intro.cpp ...
