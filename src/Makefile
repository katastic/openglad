# Makefile.in generated by automake 1.15.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2017 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/openglad
pkgincludedir = $(includedir)/openglad
pkglibdir = $(libdir)/openglad
pkglibexecdir = $(libexecdir)/openglad
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = openglad$(EXEEXT) openscen$(EXEEXT)
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_openglad_OBJECTS = glad.$(OBJEXT) button.$(OBJEXT) effect.$(OBJEXT) \
	game.$(OBJEXT) graphlib.$(OBJEXT) guy.$(OBJEXT) help.$(OBJEXT) \
	input.$(OBJEXT) intro.$(OBJEXT) living.$(OBJEXT) \
	loader.$(OBJEXT) obmap.$(OBJEXT) pal32.$(OBJEXT) \
	parser.$(OBJEXT) picker.$(OBJEXT) pixie.$(OBJEXT) \
	pixien.$(OBJEXT) radar.$(OBJEXT) screen.$(OBJEXT) \
	smooth.$(OBJEXT) sound.$(OBJEXT) stats.$(OBJEXT) \
	text.$(OBJEXT) treasure.$(OBJEXT) video.$(OBJEXT) \
	view.$(OBJEXT) walker.$(OBJEXT) weap.$(OBJEXT) sai2x.$(OBJEXT) \
	util.$(OBJEXT)
openglad_OBJECTS = $(am_openglad_OBJECTS)
openglad_LDADD = $(LDADD)
am_openscen_OBJECTS = openscen-scen.$(OBJEXT) \
	openscen-effect.$(OBJEXT) openscen-game.$(OBJEXT) \
	openscen-graphlib.$(OBJEXT) openscen-guy.$(OBJEXT) \
	openscen-help.$(OBJEXT) openscen-input.$(OBJEXT) \
	openscen-intro.$(OBJEXT) openscen-living.$(OBJEXT) \
	openscen-loader.$(OBJEXT) openscen-obmap.$(OBJEXT) \
	openscen-pal32.$(OBJEXT) openscen-parser.$(OBJEXT) \
	openscen-pixie.$(OBJEXT) openscen-pixien.$(OBJEXT) \
	openscen-radar.$(OBJEXT) openscen-screen.$(OBJEXT) \
	openscen-smooth.$(OBJEXT) openscen-sound.$(OBJEXT) \
	openscen-stats.$(OBJEXT) openscen-text.$(OBJEXT) \
	openscen-treasure.$(OBJEXT) openscen-video.$(OBJEXT) \
	openscen-view.$(OBJEXT) openscen-walker.$(OBJEXT) \
	openscen-weap.$(OBJEXT) openscen-sai2x.$(OBJEXT) \
	openscen-util.$(OBJEXT)
openscen_OBJECTS = $(am_openscen_OBJECTS)
openscen_LDADD = $(LDADD)
openscen_LINK = $(CXXLD) $(openscen_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(openglad_SOURCES) $(openscen_SOURCES)
DIST_SOURCES = $(openglad_SOURCES) $(openscen_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/depcomp $(top_srcdir)/mkinstalldirs
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.15
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =  -L/usr/lib/x86_64-linux-gnu -lSDL -lSDL_mixer
LTLIBOBJS = 
MAKEINFO = makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = openglad
PACKAGE_BUGREPORT = 
PACKAGE_NAME = openglad
PACKAGE_STRING = openglad 0.98.1
PACKAGE_TARNAME = openglad
PACKAGE_URL = 
PACKAGE_VERSION = 0.98.1
PATH_SEPARATOR = :
SDL_CFLAGS = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib/x86_64-linux-gnu -lSDL
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 0.98.1
abs_builddir = /home/novous/Desktop/openglad-master/src
abs_srcdir = /home/novous/Desktop/openglad-master/src
abs_top_builddir = /home/novous/Desktop/openglad-master
abs_top_srcdir = /home/novous/Desktop/openglad-master
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = /usr/local/games
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = /usr/local
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/novous/Desktop/openglad-master/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = /usr/local/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
#EXTRA_PROGRAMS = openscen
openglad_SOURCES = glad.cpp button.cpp effect.cpp game.cpp \
graphlib.cpp guy.cpp help.cpp input.cpp intro.cpp living.cpp loader.cpp \
obmap.cpp pal32.cpp parser.cpp picker.cpp pixie.cpp pixien.cpp radar.cpp \
screen.cpp smooth.cpp sound.cpp stats.cpp text.cpp treasure.cpp video.cpp \
view.cpp walker.cpp weap.cpp sai2x.cpp util.cpp\
base.h button.h colors.h effect.h graph.h guy.h input.h living.h \
loader.h obmap.h pal32.h palettes.h parser.h picker.h pixdefs.h pixie.h \
pixien.h radar.h scen.h screen.h smooth.h soundob.h sounds.h stats.h text.h \
treasure.h video.h view.h walker.h weap.h sai2x.h util.h

openscen_SOURCES = scen.cpp effect.cpp game.cpp \
graphlib.cpp guy.cpp help.cpp input.cpp intro.cpp living.cpp loader.cpp \
obmap.cpp pal32.cpp parser.cpp pixie.cpp pixien.cpp radar.cpp \
screen.cpp smooth.cpp sound.cpp stats.cpp text.cpp treasure.cpp video.cpp \
view.cpp walker.cpp weap.cpp sai2x.cpp util.cpp\
base.h colors.h effect.h graph.h guy.h input.h living.h \
loader.h obmap.h pal32.h palettes.h parser.h pixdefs.h pixie.h \
pixien.h radar.h scen.h screen.h smooth.h soundob.h sounds.h stats.h text.h \
treasure.h video.h view.h walker.h weap.h sai2x.h util.h

openscen_CXXFLAGS = -DOPENSCEN
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

openglad$(EXEEXT): $(openglad_OBJECTS) $(openglad_DEPENDENCIES) $(EXTRA_openglad_DEPENDENCIES) 
	@rm -f openglad$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(openglad_OBJECTS) $(openglad_LDADD) $(LIBS)

openscen$(EXEEXT): $(openscen_OBJECTS) $(openscen_DEPENDENCIES) $(EXTRA_openscen_DEPENDENCIES) 
	@rm -f openscen$(EXEEXT)
	$(AM_V_CXXLD)$(openscen_LINK) $(openscen_OBJECTS) $(openscen_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/button.Po
include ./$(DEPDIR)/effect.Po
include ./$(DEPDIR)/game.Po
include ./$(DEPDIR)/glad.Po
include ./$(DEPDIR)/graphlib.Po
include ./$(DEPDIR)/guy.Po
include ./$(DEPDIR)/help.Po
include ./$(DEPDIR)/input.Po
include ./$(DEPDIR)/intro.Po
include ./$(DEPDIR)/living.Po
include ./$(DEPDIR)/loader.Po
include ./$(DEPDIR)/obmap.Po
include ./$(DEPDIR)/openscen-effect.Po
include ./$(DEPDIR)/openscen-game.Po
include ./$(DEPDIR)/openscen-graphlib.Po
include ./$(DEPDIR)/openscen-guy.Po
include ./$(DEPDIR)/openscen-help.Po
include ./$(DEPDIR)/openscen-input.Po
include ./$(DEPDIR)/openscen-intro.Po
include ./$(DEPDIR)/openscen-living.Po
include ./$(DEPDIR)/openscen-loader.Po
include ./$(DEPDIR)/openscen-obmap.Po
include ./$(DEPDIR)/openscen-pal32.Po
include ./$(DEPDIR)/openscen-parser.Po
include ./$(DEPDIR)/openscen-pixie.Po
include ./$(DEPDIR)/openscen-pixien.Po
include ./$(DEPDIR)/openscen-radar.Po
include ./$(DEPDIR)/openscen-sai2x.Po
include ./$(DEPDIR)/openscen-scen.Po
include ./$(DEPDIR)/openscen-screen.Po
include ./$(DEPDIR)/openscen-smooth.Po
include ./$(DEPDIR)/openscen-sound.Po
include ./$(DEPDIR)/openscen-stats.Po
include ./$(DEPDIR)/openscen-text.Po
include ./$(DEPDIR)/openscen-treasure.Po
include ./$(DEPDIR)/openscen-util.Po
include ./$(DEPDIR)/openscen-video.Po
include ./$(DEPDIR)/openscen-view.Po
include ./$(DEPDIR)/openscen-walker.Po
include ./$(DEPDIR)/openscen-weap.Po
include ./$(DEPDIR)/pal32.Po
include ./$(DEPDIR)/parser.Po
include ./$(DEPDIR)/picker.Po
include ./$(DEPDIR)/pixie.Po
include ./$(DEPDIR)/pixien.Po
include ./$(DEPDIR)/radar.Po
include ./$(DEPDIR)/sai2x.Po
include ./$(DEPDIR)/screen.Po
include ./$(DEPDIR)/smooth.Po
include ./$(DEPDIR)/sound.Po
include ./$(DEPDIR)/stats.Po
include ./$(DEPDIR)/text.Po
include ./$(DEPDIR)/treasure.Po
include ./$(DEPDIR)/util.Po
include ./$(DEPDIR)/video.Po
include ./$(DEPDIR)/view.Po
include ./$(DEPDIR)/walker.Po
include ./$(DEPDIR)/weap.Po

.cpp.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

openscen-scen.o: scen.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-scen.o -MD -MP -MF $(DEPDIR)/openscen-scen.Tpo -c -o openscen-scen.o `test -f 'scen.cpp' || echo '$(srcdir)/'`scen.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-scen.Tpo $(DEPDIR)/openscen-scen.Po
#	$(AM_V_CXX)source='scen.cpp' object='openscen-scen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-scen.o `test -f 'scen.cpp' || echo '$(srcdir)/'`scen.cpp

openscen-scen.obj: scen.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-scen.obj -MD -MP -MF $(DEPDIR)/openscen-scen.Tpo -c -o openscen-scen.obj `if test -f 'scen.cpp'; then $(CYGPATH_W) 'scen.cpp'; else $(CYGPATH_W) '$(srcdir)/scen.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-scen.Tpo $(DEPDIR)/openscen-scen.Po
#	$(AM_V_CXX)source='scen.cpp' object='openscen-scen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-scen.obj `if test -f 'scen.cpp'; then $(CYGPATH_W) 'scen.cpp'; else $(CYGPATH_W) '$(srcdir)/scen.cpp'; fi`

openscen-effect.o: effect.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-effect.o -MD -MP -MF $(DEPDIR)/openscen-effect.Tpo -c -o openscen-effect.o `test -f 'effect.cpp' || echo '$(srcdir)/'`effect.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-effect.Tpo $(DEPDIR)/openscen-effect.Po
#	$(AM_V_CXX)source='effect.cpp' object='openscen-effect.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-effect.o `test -f 'effect.cpp' || echo '$(srcdir)/'`effect.cpp

openscen-effect.obj: effect.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-effect.obj -MD -MP -MF $(DEPDIR)/openscen-effect.Tpo -c -o openscen-effect.obj `if test -f 'effect.cpp'; then $(CYGPATH_W) 'effect.cpp'; else $(CYGPATH_W) '$(srcdir)/effect.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-effect.Tpo $(DEPDIR)/openscen-effect.Po
#	$(AM_V_CXX)source='effect.cpp' object='openscen-effect.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-effect.obj `if test -f 'effect.cpp'; then $(CYGPATH_W) 'effect.cpp'; else $(CYGPATH_W) '$(srcdir)/effect.cpp'; fi`

openscen-game.o: game.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-game.o -MD -MP -MF $(DEPDIR)/openscen-game.Tpo -c -o openscen-game.o `test -f 'game.cpp' || echo '$(srcdir)/'`game.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-game.Tpo $(DEPDIR)/openscen-game.Po
#	$(AM_V_CXX)source='game.cpp' object='openscen-game.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-game.o `test -f 'game.cpp' || echo '$(srcdir)/'`game.cpp

openscen-game.obj: game.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-game.obj -MD -MP -MF $(DEPDIR)/openscen-game.Tpo -c -o openscen-game.obj `if test -f 'game.cpp'; then $(CYGPATH_W) 'game.cpp'; else $(CYGPATH_W) '$(srcdir)/game.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-game.Tpo $(DEPDIR)/openscen-game.Po
#	$(AM_V_CXX)source='game.cpp' object='openscen-game.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-game.obj `if test -f 'game.cpp'; then $(CYGPATH_W) 'game.cpp'; else $(CYGPATH_W) '$(srcdir)/game.cpp'; fi`

openscen-graphlib.o: graphlib.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-graphlib.o -MD -MP -MF $(DEPDIR)/openscen-graphlib.Tpo -c -o openscen-graphlib.o `test -f 'graphlib.cpp' || echo '$(srcdir)/'`graphlib.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-graphlib.Tpo $(DEPDIR)/openscen-graphlib.Po
#	$(AM_V_CXX)source='graphlib.cpp' object='openscen-graphlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-graphlib.o `test -f 'graphlib.cpp' || echo '$(srcdir)/'`graphlib.cpp

openscen-graphlib.obj: graphlib.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-graphlib.obj -MD -MP -MF $(DEPDIR)/openscen-graphlib.Tpo -c -o openscen-graphlib.obj `if test -f 'graphlib.cpp'; then $(CYGPATH_W) 'graphlib.cpp'; else $(CYGPATH_W) '$(srcdir)/graphlib.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-graphlib.Tpo $(DEPDIR)/openscen-graphlib.Po
#	$(AM_V_CXX)source='graphlib.cpp' object='openscen-graphlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-graphlib.obj `if test -f 'graphlib.cpp'; then $(CYGPATH_W) 'graphlib.cpp'; else $(CYGPATH_W) '$(srcdir)/graphlib.cpp'; fi`

openscen-guy.o: guy.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-guy.o -MD -MP -MF $(DEPDIR)/openscen-guy.Tpo -c -o openscen-guy.o `test -f 'guy.cpp' || echo '$(srcdir)/'`guy.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-guy.Tpo $(DEPDIR)/openscen-guy.Po
#	$(AM_V_CXX)source='guy.cpp' object='openscen-guy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-guy.o `test -f 'guy.cpp' || echo '$(srcdir)/'`guy.cpp

openscen-guy.obj: guy.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-guy.obj -MD -MP -MF $(DEPDIR)/openscen-guy.Tpo -c -o openscen-guy.obj `if test -f 'guy.cpp'; then $(CYGPATH_W) 'guy.cpp'; else $(CYGPATH_W) '$(srcdir)/guy.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-guy.Tpo $(DEPDIR)/openscen-guy.Po
#	$(AM_V_CXX)source='guy.cpp' object='openscen-guy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-guy.obj `if test -f 'guy.cpp'; then $(CYGPATH_W) 'guy.cpp'; else $(CYGPATH_W) '$(srcdir)/guy.cpp'; fi`

openscen-help.o: help.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-help.o -MD -MP -MF $(DEPDIR)/openscen-help.Tpo -c -o openscen-help.o `test -f 'help.cpp' || echo '$(srcdir)/'`help.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-help.Tpo $(DEPDIR)/openscen-help.Po
#	$(AM_V_CXX)source='help.cpp' object='openscen-help.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-help.o `test -f 'help.cpp' || echo '$(srcdir)/'`help.cpp

openscen-help.obj: help.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-help.obj -MD -MP -MF $(DEPDIR)/openscen-help.Tpo -c -o openscen-help.obj `if test -f 'help.cpp'; then $(CYGPATH_W) 'help.cpp'; else $(CYGPATH_W) '$(srcdir)/help.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-help.Tpo $(DEPDIR)/openscen-help.Po
#	$(AM_V_CXX)source='help.cpp' object='openscen-help.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-help.obj `if test -f 'help.cpp'; then $(CYGPATH_W) 'help.cpp'; else $(CYGPATH_W) '$(srcdir)/help.cpp'; fi`

openscen-input.o: input.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-input.o -MD -MP -MF $(DEPDIR)/openscen-input.Tpo -c -o openscen-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-input.Tpo $(DEPDIR)/openscen-input.Po
#	$(AM_V_CXX)source='input.cpp' object='openscen-input.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-input.o `test -f 'input.cpp' || echo '$(srcdir)/'`input.cpp

openscen-input.obj: input.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-input.obj -MD -MP -MF $(DEPDIR)/openscen-input.Tpo -c -o openscen-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-input.Tpo $(DEPDIR)/openscen-input.Po
#	$(AM_V_CXX)source='input.cpp' object='openscen-input.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-input.obj `if test -f 'input.cpp'; then $(CYGPATH_W) 'input.cpp'; else $(CYGPATH_W) '$(srcdir)/input.cpp'; fi`

openscen-intro.o: intro.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-intro.o -MD -MP -MF $(DEPDIR)/openscen-intro.Tpo -c -o openscen-intro.o `test -f 'intro.cpp' || echo '$(srcdir)/'`intro.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-intro.Tpo $(DEPDIR)/openscen-intro.Po
#	$(AM_V_CXX)source='intro.cpp' object='openscen-intro.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-intro.o `test -f 'intro.cpp' || echo '$(srcdir)/'`intro.cpp

openscen-intro.obj: intro.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-intro.obj -MD -MP -MF $(DEPDIR)/openscen-intro.Tpo -c -o openscen-intro.obj `if test -f 'intro.cpp'; then $(CYGPATH_W) 'intro.cpp'; else $(CYGPATH_W) '$(srcdir)/intro.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-intro.Tpo $(DEPDIR)/openscen-intro.Po
#	$(AM_V_CXX)source='intro.cpp' object='openscen-intro.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-intro.obj `if test -f 'intro.cpp'; then $(CYGPATH_W) 'intro.cpp'; else $(CYGPATH_W) '$(srcdir)/intro.cpp'; fi`

openscen-living.o: living.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-living.o -MD -MP -MF $(DEPDIR)/openscen-living.Tpo -c -o openscen-living.o `test -f 'living.cpp' || echo '$(srcdir)/'`living.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-living.Tpo $(DEPDIR)/openscen-living.Po
#	$(AM_V_CXX)source='living.cpp' object='openscen-living.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-living.o `test -f 'living.cpp' || echo '$(srcdir)/'`living.cpp

openscen-living.obj: living.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-living.obj -MD -MP -MF $(DEPDIR)/openscen-living.Tpo -c -o openscen-living.obj `if test -f 'living.cpp'; then $(CYGPATH_W) 'living.cpp'; else $(CYGPATH_W) '$(srcdir)/living.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-living.Tpo $(DEPDIR)/openscen-living.Po
#	$(AM_V_CXX)source='living.cpp' object='openscen-living.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-living.obj `if test -f 'living.cpp'; then $(CYGPATH_W) 'living.cpp'; else $(CYGPATH_W) '$(srcdir)/living.cpp'; fi`

openscen-loader.o: loader.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-loader.o -MD -MP -MF $(DEPDIR)/openscen-loader.Tpo -c -o openscen-loader.o `test -f 'loader.cpp' || echo '$(srcdir)/'`loader.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-loader.Tpo $(DEPDIR)/openscen-loader.Po
#	$(AM_V_CXX)source='loader.cpp' object='openscen-loader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-loader.o `test -f 'loader.cpp' || echo '$(srcdir)/'`loader.cpp

openscen-loader.obj: loader.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-loader.obj -MD -MP -MF $(DEPDIR)/openscen-loader.Tpo -c -o openscen-loader.obj `if test -f 'loader.cpp'; then $(CYGPATH_W) 'loader.cpp'; else $(CYGPATH_W) '$(srcdir)/loader.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-loader.Tpo $(DEPDIR)/openscen-loader.Po
#	$(AM_V_CXX)source='loader.cpp' object='openscen-loader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-loader.obj `if test -f 'loader.cpp'; then $(CYGPATH_W) 'loader.cpp'; else $(CYGPATH_W) '$(srcdir)/loader.cpp'; fi`

openscen-obmap.o: obmap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-obmap.o -MD -MP -MF $(DEPDIR)/openscen-obmap.Tpo -c -o openscen-obmap.o `test -f 'obmap.cpp' || echo '$(srcdir)/'`obmap.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-obmap.Tpo $(DEPDIR)/openscen-obmap.Po
#	$(AM_V_CXX)source='obmap.cpp' object='openscen-obmap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-obmap.o `test -f 'obmap.cpp' || echo '$(srcdir)/'`obmap.cpp

openscen-obmap.obj: obmap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-obmap.obj -MD -MP -MF $(DEPDIR)/openscen-obmap.Tpo -c -o openscen-obmap.obj `if test -f 'obmap.cpp'; then $(CYGPATH_W) 'obmap.cpp'; else $(CYGPATH_W) '$(srcdir)/obmap.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-obmap.Tpo $(DEPDIR)/openscen-obmap.Po
#	$(AM_V_CXX)source='obmap.cpp' object='openscen-obmap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-obmap.obj `if test -f 'obmap.cpp'; then $(CYGPATH_W) 'obmap.cpp'; else $(CYGPATH_W) '$(srcdir)/obmap.cpp'; fi`

openscen-pal32.o: pal32.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-pal32.o -MD -MP -MF $(DEPDIR)/openscen-pal32.Tpo -c -o openscen-pal32.o `test -f 'pal32.cpp' || echo '$(srcdir)/'`pal32.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-pal32.Tpo $(DEPDIR)/openscen-pal32.Po
#	$(AM_V_CXX)source='pal32.cpp' object='openscen-pal32.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pal32.o `test -f 'pal32.cpp' || echo '$(srcdir)/'`pal32.cpp

openscen-pal32.obj: pal32.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-pal32.obj -MD -MP -MF $(DEPDIR)/openscen-pal32.Tpo -c -o openscen-pal32.obj `if test -f 'pal32.cpp'; then $(CYGPATH_W) 'pal32.cpp'; else $(CYGPATH_W) '$(srcdir)/pal32.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-pal32.Tpo $(DEPDIR)/openscen-pal32.Po
#	$(AM_V_CXX)source='pal32.cpp' object='openscen-pal32.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pal32.obj `if test -f 'pal32.cpp'; then $(CYGPATH_W) 'pal32.cpp'; else $(CYGPATH_W) '$(srcdir)/pal32.cpp'; fi`

openscen-parser.o: parser.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-parser.o -MD -MP -MF $(DEPDIR)/openscen-parser.Tpo -c -o openscen-parser.o `test -f 'parser.cpp' || echo '$(srcdir)/'`parser.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-parser.Tpo $(DEPDIR)/openscen-parser.Po
#	$(AM_V_CXX)source='parser.cpp' object='openscen-parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-parser.o `test -f 'parser.cpp' || echo '$(srcdir)/'`parser.cpp

openscen-parser.obj: parser.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-parser.obj -MD -MP -MF $(DEPDIR)/openscen-parser.Tpo -c -o openscen-parser.obj `if test -f 'parser.cpp'; then $(CYGPATH_W) 'parser.cpp'; else $(CYGPATH_W) '$(srcdir)/parser.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-parser.Tpo $(DEPDIR)/openscen-parser.Po
#	$(AM_V_CXX)source='parser.cpp' object='openscen-parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-parser.obj `if test -f 'parser.cpp'; then $(CYGPATH_W) 'parser.cpp'; else $(CYGPATH_W) '$(srcdir)/parser.cpp'; fi`

openscen-pixie.o: pixie.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-pixie.o -MD -MP -MF $(DEPDIR)/openscen-pixie.Tpo -c -o openscen-pixie.o `test -f 'pixie.cpp' || echo '$(srcdir)/'`pixie.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-pixie.Tpo $(DEPDIR)/openscen-pixie.Po
#	$(AM_V_CXX)source='pixie.cpp' object='openscen-pixie.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixie.o `test -f 'pixie.cpp' || echo '$(srcdir)/'`pixie.cpp

openscen-pixie.obj: pixie.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-pixie.obj -MD -MP -MF $(DEPDIR)/openscen-pixie.Tpo -c -o openscen-pixie.obj `if test -f 'pixie.cpp'; then $(CYGPATH_W) 'pixie.cpp'; else $(CYGPATH_W) '$(srcdir)/pixie.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-pixie.Tpo $(DEPDIR)/openscen-pixie.Po
#	$(AM_V_CXX)source='pixie.cpp' object='openscen-pixie.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixie.obj `if test -f 'pixie.cpp'; then $(CYGPATH_W) 'pixie.cpp'; else $(CYGPATH_W) '$(srcdir)/pixie.cpp'; fi`

openscen-pixien.o: pixien.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-pixien.o -MD -MP -MF $(DEPDIR)/openscen-pixien.Tpo -c -o openscen-pixien.o `test -f 'pixien.cpp' || echo '$(srcdir)/'`pixien.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-pixien.Tpo $(DEPDIR)/openscen-pixien.Po
#	$(AM_V_CXX)source='pixien.cpp' object='openscen-pixien.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixien.o `test -f 'pixien.cpp' || echo '$(srcdir)/'`pixien.cpp

openscen-pixien.obj: pixien.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-pixien.obj -MD -MP -MF $(DEPDIR)/openscen-pixien.Tpo -c -o openscen-pixien.obj `if test -f 'pixien.cpp'; then $(CYGPATH_W) 'pixien.cpp'; else $(CYGPATH_W) '$(srcdir)/pixien.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-pixien.Tpo $(DEPDIR)/openscen-pixien.Po
#	$(AM_V_CXX)source='pixien.cpp' object='openscen-pixien.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixien.obj `if test -f 'pixien.cpp'; then $(CYGPATH_W) 'pixien.cpp'; else $(CYGPATH_W) '$(srcdir)/pixien.cpp'; fi`

openscen-radar.o: radar.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-radar.o -MD -MP -MF $(DEPDIR)/openscen-radar.Tpo -c -o openscen-radar.o `test -f 'radar.cpp' || echo '$(srcdir)/'`radar.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-radar.Tpo $(DEPDIR)/openscen-radar.Po
#	$(AM_V_CXX)source='radar.cpp' object='openscen-radar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-radar.o `test -f 'radar.cpp' || echo '$(srcdir)/'`radar.cpp

openscen-radar.obj: radar.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-radar.obj -MD -MP -MF $(DEPDIR)/openscen-radar.Tpo -c -o openscen-radar.obj `if test -f 'radar.cpp'; then $(CYGPATH_W) 'radar.cpp'; else $(CYGPATH_W) '$(srcdir)/radar.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-radar.Tpo $(DEPDIR)/openscen-radar.Po
#	$(AM_V_CXX)source='radar.cpp' object='openscen-radar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-radar.obj `if test -f 'radar.cpp'; then $(CYGPATH_W) 'radar.cpp'; else $(CYGPATH_W) '$(srcdir)/radar.cpp'; fi`

openscen-screen.o: screen.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-screen.o -MD -MP -MF $(DEPDIR)/openscen-screen.Tpo -c -o openscen-screen.o `test -f 'screen.cpp' || echo '$(srcdir)/'`screen.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-screen.Tpo $(DEPDIR)/openscen-screen.Po
#	$(AM_V_CXX)source='screen.cpp' object='openscen-screen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-screen.o `test -f 'screen.cpp' || echo '$(srcdir)/'`screen.cpp

openscen-screen.obj: screen.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-screen.obj -MD -MP -MF $(DEPDIR)/openscen-screen.Tpo -c -o openscen-screen.obj `if test -f 'screen.cpp'; then $(CYGPATH_W) 'screen.cpp'; else $(CYGPATH_W) '$(srcdir)/screen.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-screen.Tpo $(DEPDIR)/openscen-screen.Po
#	$(AM_V_CXX)source='screen.cpp' object='openscen-screen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-screen.obj `if test -f 'screen.cpp'; then $(CYGPATH_W) 'screen.cpp'; else $(CYGPATH_W) '$(srcdir)/screen.cpp'; fi`

openscen-smooth.o: smooth.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-smooth.o -MD -MP -MF $(DEPDIR)/openscen-smooth.Tpo -c -o openscen-smooth.o `test -f 'smooth.cpp' || echo '$(srcdir)/'`smooth.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-smooth.Tpo $(DEPDIR)/openscen-smooth.Po
#	$(AM_V_CXX)source='smooth.cpp' object='openscen-smooth.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-smooth.o `test -f 'smooth.cpp' || echo '$(srcdir)/'`smooth.cpp

openscen-smooth.obj: smooth.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-smooth.obj -MD -MP -MF $(DEPDIR)/openscen-smooth.Tpo -c -o openscen-smooth.obj `if test -f 'smooth.cpp'; then $(CYGPATH_W) 'smooth.cpp'; else $(CYGPATH_W) '$(srcdir)/smooth.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-smooth.Tpo $(DEPDIR)/openscen-smooth.Po
#	$(AM_V_CXX)source='smooth.cpp' object='openscen-smooth.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-smooth.obj `if test -f 'smooth.cpp'; then $(CYGPATH_W) 'smooth.cpp'; else $(CYGPATH_W) '$(srcdir)/smooth.cpp'; fi`

openscen-sound.o: sound.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-sound.o -MD -MP -MF $(DEPDIR)/openscen-sound.Tpo -c -o openscen-sound.o `test -f 'sound.cpp' || echo '$(srcdir)/'`sound.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-sound.Tpo $(DEPDIR)/openscen-sound.Po
#	$(AM_V_CXX)source='sound.cpp' object='openscen-sound.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sound.o `test -f 'sound.cpp' || echo '$(srcdir)/'`sound.cpp

openscen-sound.obj: sound.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-sound.obj -MD -MP -MF $(DEPDIR)/openscen-sound.Tpo -c -o openscen-sound.obj `if test -f 'sound.cpp'; then $(CYGPATH_W) 'sound.cpp'; else $(CYGPATH_W) '$(srcdir)/sound.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-sound.Tpo $(DEPDIR)/openscen-sound.Po
#	$(AM_V_CXX)source='sound.cpp' object='openscen-sound.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sound.obj `if test -f 'sound.cpp'; then $(CYGPATH_W) 'sound.cpp'; else $(CYGPATH_W) '$(srcdir)/sound.cpp'; fi`

openscen-stats.o: stats.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-stats.o -MD -MP -MF $(DEPDIR)/openscen-stats.Tpo -c -o openscen-stats.o `test -f 'stats.cpp' || echo '$(srcdir)/'`stats.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-stats.Tpo $(DEPDIR)/openscen-stats.Po
#	$(AM_V_CXX)source='stats.cpp' object='openscen-stats.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-stats.o `test -f 'stats.cpp' || echo '$(srcdir)/'`stats.cpp

openscen-stats.obj: stats.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-stats.obj -MD -MP -MF $(DEPDIR)/openscen-stats.Tpo -c -o openscen-stats.obj `if test -f 'stats.cpp'; then $(CYGPATH_W) 'stats.cpp'; else $(CYGPATH_W) '$(srcdir)/stats.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-stats.Tpo $(DEPDIR)/openscen-stats.Po
#	$(AM_V_CXX)source='stats.cpp' object='openscen-stats.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-stats.obj `if test -f 'stats.cpp'; then $(CYGPATH_W) 'stats.cpp'; else $(CYGPATH_W) '$(srcdir)/stats.cpp'; fi`

openscen-text.o: text.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-text.o -MD -MP -MF $(DEPDIR)/openscen-text.Tpo -c -o openscen-text.o `test -f 'text.cpp' || echo '$(srcdir)/'`text.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-text.Tpo $(DEPDIR)/openscen-text.Po
#	$(AM_V_CXX)source='text.cpp' object='openscen-text.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-text.o `test -f 'text.cpp' || echo '$(srcdir)/'`text.cpp

openscen-text.obj: text.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-text.obj -MD -MP -MF $(DEPDIR)/openscen-text.Tpo -c -o openscen-text.obj `if test -f 'text.cpp'; then $(CYGPATH_W) 'text.cpp'; else $(CYGPATH_W) '$(srcdir)/text.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-text.Tpo $(DEPDIR)/openscen-text.Po
#	$(AM_V_CXX)source='text.cpp' object='openscen-text.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-text.obj `if test -f 'text.cpp'; then $(CYGPATH_W) 'text.cpp'; else $(CYGPATH_W) '$(srcdir)/text.cpp'; fi`

openscen-treasure.o: treasure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-treasure.o -MD -MP -MF $(DEPDIR)/openscen-treasure.Tpo -c -o openscen-treasure.o `test -f 'treasure.cpp' || echo '$(srcdir)/'`treasure.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-treasure.Tpo $(DEPDIR)/openscen-treasure.Po
#	$(AM_V_CXX)source='treasure.cpp' object='openscen-treasure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-treasure.o `test -f 'treasure.cpp' || echo '$(srcdir)/'`treasure.cpp

openscen-treasure.obj: treasure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-treasure.obj -MD -MP -MF $(DEPDIR)/openscen-treasure.Tpo -c -o openscen-treasure.obj `if test -f 'treasure.cpp'; then $(CYGPATH_W) 'treasure.cpp'; else $(CYGPATH_W) '$(srcdir)/treasure.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-treasure.Tpo $(DEPDIR)/openscen-treasure.Po
#	$(AM_V_CXX)source='treasure.cpp' object='openscen-treasure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-treasure.obj `if test -f 'treasure.cpp'; then $(CYGPATH_W) 'treasure.cpp'; else $(CYGPATH_W) '$(srcdir)/treasure.cpp'; fi`

openscen-video.o: video.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-video.o -MD -MP -MF $(DEPDIR)/openscen-video.Tpo -c -o openscen-video.o `test -f 'video.cpp' || echo '$(srcdir)/'`video.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-video.Tpo $(DEPDIR)/openscen-video.Po
#	$(AM_V_CXX)source='video.cpp' object='openscen-video.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-video.o `test -f 'video.cpp' || echo '$(srcdir)/'`video.cpp

openscen-video.obj: video.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-video.obj -MD -MP -MF $(DEPDIR)/openscen-video.Tpo -c -o openscen-video.obj `if test -f 'video.cpp'; then $(CYGPATH_W) 'video.cpp'; else $(CYGPATH_W) '$(srcdir)/video.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-video.Tpo $(DEPDIR)/openscen-video.Po
#	$(AM_V_CXX)source='video.cpp' object='openscen-video.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-video.obj `if test -f 'video.cpp'; then $(CYGPATH_W) 'video.cpp'; else $(CYGPATH_W) '$(srcdir)/video.cpp'; fi`

openscen-view.o: view.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-view.o -MD -MP -MF $(DEPDIR)/openscen-view.Tpo -c -o openscen-view.o `test -f 'view.cpp' || echo '$(srcdir)/'`view.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-view.Tpo $(DEPDIR)/openscen-view.Po
#	$(AM_V_CXX)source='view.cpp' object='openscen-view.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-view.o `test -f 'view.cpp' || echo '$(srcdir)/'`view.cpp

openscen-view.obj: view.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-view.obj -MD -MP -MF $(DEPDIR)/openscen-view.Tpo -c -o openscen-view.obj `if test -f 'view.cpp'; then $(CYGPATH_W) 'view.cpp'; else $(CYGPATH_W) '$(srcdir)/view.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-view.Tpo $(DEPDIR)/openscen-view.Po
#	$(AM_V_CXX)source='view.cpp' object='openscen-view.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-view.obj `if test -f 'view.cpp'; then $(CYGPATH_W) 'view.cpp'; else $(CYGPATH_W) '$(srcdir)/view.cpp'; fi`

openscen-walker.o: walker.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-walker.o -MD -MP -MF $(DEPDIR)/openscen-walker.Tpo -c -o openscen-walker.o `test -f 'walker.cpp' || echo '$(srcdir)/'`walker.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-walker.Tpo $(DEPDIR)/openscen-walker.Po
#	$(AM_V_CXX)source='walker.cpp' object='openscen-walker.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-walker.o `test -f 'walker.cpp' || echo '$(srcdir)/'`walker.cpp

openscen-walker.obj: walker.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-walker.obj -MD -MP -MF $(DEPDIR)/openscen-walker.Tpo -c -o openscen-walker.obj `if test -f 'walker.cpp'; then $(CYGPATH_W) 'walker.cpp'; else $(CYGPATH_W) '$(srcdir)/walker.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-walker.Tpo $(DEPDIR)/openscen-walker.Po
#	$(AM_V_CXX)source='walker.cpp' object='openscen-walker.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-walker.obj `if test -f 'walker.cpp'; then $(CYGPATH_W) 'walker.cpp'; else $(CYGPATH_W) '$(srcdir)/walker.cpp'; fi`

openscen-weap.o: weap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-weap.o -MD -MP -MF $(DEPDIR)/openscen-weap.Tpo -c -o openscen-weap.o `test -f 'weap.cpp' || echo '$(srcdir)/'`weap.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-weap.Tpo $(DEPDIR)/openscen-weap.Po
#	$(AM_V_CXX)source='weap.cpp' object='openscen-weap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-weap.o `test -f 'weap.cpp' || echo '$(srcdir)/'`weap.cpp

openscen-weap.obj: weap.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-weap.obj -MD -MP -MF $(DEPDIR)/openscen-weap.Tpo -c -o openscen-weap.obj `if test -f 'weap.cpp'; then $(CYGPATH_W) 'weap.cpp'; else $(CYGPATH_W) '$(srcdir)/weap.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-weap.Tpo $(DEPDIR)/openscen-weap.Po
#	$(AM_V_CXX)source='weap.cpp' object='openscen-weap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-weap.obj `if test -f 'weap.cpp'; then $(CYGPATH_W) 'weap.cpp'; else $(CYGPATH_W) '$(srcdir)/weap.cpp'; fi`

openscen-sai2x.o: sai2x.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-sai2x.o -MD -MP -MF $(DEPDIR)/openscen-sai2x.Tpo -c -o openscen-sai2x.o `test -f 'sai2x.cpp' || echo '$(srcdir)/'`sai2x.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-sai2x.Tpo $(DEPDIR)/openscen-sai2x.Po
#	$(AM_V_CXX)source='sai2x.cpp' object='openscen-sai2x.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sai2x.o `test -f 'sai2x.cpp' || echo '$(srcdir)/'`sai2x.cpp

openscen-sai2x.obj: sai2x.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-sai2x.obj -MD -MP -MF $(DEPDIR)/openscen-sai2x.Tpo -c -o openscen-sai2x.obj `if test -f 'sai2x.cpp'; then $(CYGPATH_W) 'sai2x.cpp'; else $(CYGPATH_W) '$(srcdir)/sai2x.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-sai2x.Tpo $(DEPDIR)/openscen-sai2x.Po
#	$(AM_V_CXX)source='sai2x.cpp' object='openscen-sai2x.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sai2x.obj `if test -f 'sai2x.cpp'; then $(CYGPATH_W) 'sai2x.cpp'; else $(CYGPATH_W) '$(srcdir)/sai2x.cpp'; fi`

openscen-util.o: util.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-util.o -MD -MP -MF $(DEPDIR)/openscen-util.Tpo -c -o openscen-util.o `test -f 'util.cpp' || echo '$(srcdir)/'`util.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-util.Tpo $(DEPDIR)/openscen-util.Po
#	$(AM_V_CXX)source='util.cpp' object='openscen-util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-util.o `test -f 'util.cpp' || echo '$(srcdir)/'`util.cpp

openscen-util.obj: util.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -MT openscen-util.obj -MD -MP -MF $(DEPDIR)/openscen-util.Tpo -c -o openscen-util.obj `if test -f 'util.cpp'; then $(CYGPATH_W) 'util.cpp'; else $(CYGPATH_W) '$(srcdir)/util.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/openscen-util.Tpo $(DEPDIR)/openscen-util.Po
#	$(AM_V_CXX)source='util.cpp' object='openscen-util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-util.obj `if test -f 'util.cpp'; then $(CYGPATH_W) 'util.cpp'; else $(CYGPATH_W) '$(srcdir)/util.cpp'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: all install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-hdr \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-binPROGRAMS

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
