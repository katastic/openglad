button.cpp:205:10: warning: Member variable 'vbutton::fun' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:205:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:205:10: warning: Member variable 'vbutton::hotkey' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:205:10: warning: Member variable 'vbutton::color' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:205:10: warning: Member variable 'vbutton::hidden' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:205:10: warning: Member variable 'vbutton::no_draw' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton() //for pointers
         ^
button.cpp:113:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton(Sint32 xpos, Sint32 ypos, Sint32 wide, Sint32 high,
         ^
button.cpp:142:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton(Sint32 xpos, Sint32 ypos, Sint32 wide, Sint32 high,
         ^
button.cpp:171:10: warning: Member variable 'vbutton::prev' is not initialized in the constructor. [uninitMemberVar]
vbutton::vbutton(Sint32 xpos, Sint32 ypos, Sint32 wide, Sint32 high,
         ^
button.cpp:116:5: performance: Variable 'arg' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    arg = pass;
    ^
button.cpp:118:5: performance: Variable 'myfunc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    myfunc = 0;
    ^
button.cpp:119:5: performance: Variable 'xloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    xloc = xpos;
    ^
button.cpp:120:5: performance: Variable 'yloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    yloc = ypos;
    ^
button.cpp:121:5: performance: Variable 'width' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    width = wide;
    ^
button.cpp:122:5: performance: Variable 'height' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    height = high;
    ^
button.cpp:125:5: performance: Variable 'label' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    label = msg;
    ^
button.cpp:145:5: performance: Variable 'arg' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    arg = pass;
    ^
button.cpp:147:5: performance: Variable 'myfunc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    myfunc = func_code;
    ^
button.cpp:148:5: performance: Variable 'xloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    xloc = xpos;
    ^
button.cpp:149:5: performance: Variable 'yloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    yloc = ypos;
    ^
button.cpp:150:5: performance: Variable 'width' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    width = wide;
    ^
button.cpp:151:5: performance: Variable 'height' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    height = high;
    ^
button.cpp:154:5: performance: Variable 'label' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    label = msg;
    ^
button.cpp:175:5: performance: Variable 'arg' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    arg = pass;
    ^
button.cpp:177:5: performance: Variable 'myfunc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    myfunc = func_code;
    ^
button.cpp:178:5: performance: Variable 'xloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    xloc = xpos;
    ^
button.cpp:179:5: performance: Variable 'yloc' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    yloc = ypos;
    ^
button.cpp:180:5: performance: Variable 'width' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    width = wide;
    ^
button.cpp:181:5: performance: Variable 'height' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    height = high;
    ^
button.cpp:184:5: performance: Variable 'label' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    label = msg;
    ^
level_data.h:102:5: style: Class 'LevelData' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    LevelData(int id);
    ^
button.cpp:436:17: style: Variable 'mymouse' can be declared with const [constVariable]
    MouseState& mymouse = query_mouse();
                ^
button.cpp:325:20: style: Variable 'retvalue' is assigned a value that is never used. [unreadVariable]
    Sint32 retvalue=0;
                   ^
button.cpp:355:20: style: Variable 'retvalue' is assigned a value that is never used. [unreadVariable]
    Sint32 retvalue=0;
                   ^
button.cpp:415:21: style: Variable 'whichbutton' is assigned a value that is never used. [unreadVariable]
        whichbutton = 1;
                    ^
campaign_picker.cpp:142:13: warning: Class 'CampaignEntry' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
            icon = new pixie(icondata);
            ^
campaign_picker.cpp:142:13: warning: Class 'CampaignEntry' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
            icon = new pixie(icondata);
            ^
campaign_picker.cpp:329:47: style: Argument 'area.x-30-20' to function Sint16 is always 94 [constArgument]
    const SDL_Rect prev = {Sint16(area.x - 30 - 20), Sint16(area.y), 30, 10};
                                              ^
campaign_picker.cpp:321:12: note: area.x is assigned value 144
    area.x = 160 - 16;
           ^
campaign_picker.cpp:329:47: note: Argument 'area.x-30-20' to function Sint16 is always 94
    const SDL_Rect prev = {Sint16(area.x - 30 - 20), Sint16(area.y), 30, 10};
                                              ^
effect.h:32:3: style: Class 'effect' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  effect(const PixieData& data);
  ^
effect.cpp:48:8: style: The scope of the variable 'numfoes' can be reduced. [variableScope]
 short numfoes;
       ^
living.h:28:3: style: Class 'living' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  living(const PixieData& data);
  ^
living.h:38:18: style: The function 'query_order' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  char           query_order()
                 ^
walker.h:60:16: note: Virtual function in base class
  virtual char query_order()
               ^
living.h:38:18: note: Function in derived class
  char           query_order()
                 ^
treasure.h:34:8: style: The function 'set_direct_frame' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  void set_direct_frame(short whatframe);
       ^
walker.h:77:16: note: Virtual function in base class
  virtual void set_direct_frame(short whichframe);
               ^
treasure.h:34:8: note: Function in derived class
  void set_direct_frame(short whatframe);
       ^
treasure.h:35:8: style: The function 'query_order' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
  char query_order()
       ^
walker.h:60:16: note: Virtual function in base class
  virtual char query_order()
               ^
treasure.h:35:8: note: Function in derived class
  char query_order()
       ^
game.cpp:28:17: style: The scope of the variable 'temp_walker' can be reduced. [variableScope]
 walker        *temp_walker,  *replace_walker;
                ^
game.cpp:29:16: style: The scope of the variable 'myord' can be reduced. [variableScope]
 short         myord, myfam;
               ^
game.cpp:29:23: style: The scope of the variable 'myfam' can be reduced. [variableScope]
 short         myord, myfam;
                      ^
game.cpp:68:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i = 0; i < myscreen->save_data.team_size; i++)
         ^
game.cpp:31:16: note: Shadowed declaration
 int           i;
               ^
game.cpp:68:10: note: Shadow variable
 for(int i = 0; i < myscreen->save_data.team_size; i++)
         ^
glad.cpp:717:22: warning: Either the condition 'control' is redundant or there is possible null pointer dereference: control. [nullPointerRedundantCheck]
    if (scorecountup[control->team_num] > myscore)
                     ^
glad.cpp:713:9: note: Assuming that condition 'control' is not redundant
    if (control)
        ^
glad.cpp:717:22: note: Null pointer dereference
    if (scorecountup[control->team_num] > myscore)
                     ^
glad.cpp:563:11: style: The scope of the variable 'control' can be reduced. [variableScope]
 walker  *control;
          ^
glad.cpp:564:8: style: The scope of the variable 'lm' can be reduced. [variableScope]
 short lm, tm; // left and top margins
       ^
glad.cpp:564:12: style: The scope of the variable 'tm' can be reduced. [variableScope]
 short lm, tm; // left and top margins
           ^
glad.cpp:565:8: style: The scope of the variable 'rm' can be reduced. [variableScope]
 short rm, bm; // right and bottom margins
       ^
glad.cpp:825:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 short i, j;
       ^
glad.cpp:825:11: style: The scope of the variable 'j' can be reduced. [variableScope]
 short i, j;
          ^
glad.cpp:485:18: style: Variable 'bar_length' is assigned a value that is never used. [unreadVariable]
 short bar_length=0;
                 ^
glad.cpp:554:17: style: Variable 'tempfoes' is assigned a value that is never used. [unreadVariable]
 short tempfoes = 0;
                ^
glad.cpp:556:19: style: Variable 'tempallies' is assigned a value that is never used. [unreadVariable]
 short tempallies = 0;
                  ^
glad.cpp:704:9: style: Local variable 'bm' shadows outer variable [shadowVariable]
    int bm = tm + 54;
        ^
glad.cpp:565:12: note: Shadowed declaration
 short rm, bm; // right and bottom margins
           ^
glad.cpp:704:9: note: Shadow variable
    int bm = tm + 54;
        ^
gloader.cpp:341:2: warning: Class 'loader' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
 graphics = new PixieData[SIZE_ORDERS*SIZE_FAMILIES];
 ^
gloader.cpp:341:2: warning: Class 'loader' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
 graphics = new PixieData[SIZE_ORDERS*SIZE_FAMILIES];
 ^
gparser.cpp:179:34: style: Parameter 'argc' can be declared with const [constParameter]
void cfg_store::commandline(int &argc, char **&argv)
                                 ^
gparser.cpp:179:48: style: Parameter 'argv' can be declared with const [constParameter]
void cfg_store::commandline(int &argc, char **&argv)
                                               ^
guy.cpp:71:2: performance: Variable 'level_kills' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 level_kills = 0;
 ^
guy.cpp:72:2: performance: Variable 'total_damage' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 total_damage = total_hits = total_shots = 0;
 ^
guy.cpp:72:17: performance: Variable 'total_hits' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 total_damage = total_hits = total_shots = 0;
                ^
guy.cpp:72:30: performance: Variable 'total_shots' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 total_damage = total_hits = total_shots = 0;
                             ^
guy.cpp:73:2: performance: Variable 'exp' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 exp = 0;
 ^
guy.cpp:342:47: style: Same expression used in consecutive assignments of 'c' and 'i'. [duplicateAssignExpression]
    short s = 8*level_diff, d = 6*level_diff, c = 8*level_diff, i = 8*level_diff, a = 1*level_diff;
                                              ^
guy.cpp:342:65: note: Same expression used in consecutive assignments of 'c' and 'i'.
    short s = 8*level_diff, d = 6*level_diff, c = 8*level_diff, i = 8*level_diff, a = 1*level_diff;
                                                                ^
guy.cpp:342:47: note: Same expression used in consecutive assignments of 'c' and 'i'.
    short s = 8*level_diff, d = 6*level_diff, c = 8*level_diff, i = 8*level_diff, a = 1*level_diff;
                                              ^
help.cpp:76:21: style: Variable 'key_presses' is assigned a value that is never used. [unreadVariable]
 Sint32 key_presses = 0;
                    ^
input.cpp:908:10: warning: Member variable 'JoyData::key_type' is not initialized in the constructor. [uninitMemberVar]
JoyData::JoyData()
         ^
input.cpp:908:10: warning: Member variable 'JoyData::key_index' is not initialized in the constructor. [uninitMemberVar]
JoyData::JoyData()
         ^
input.cpp:347:9: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
        break;
        ^
io.cpp:242:73: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                        ^
io.cpp:276:9: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        e++;
        ^
io.cpp:306:9: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        e++;
        ^
io.cpp:523:91: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            for(std::list<std::string>::iterator e = sublist.begin(); e != sublist.end(); e++)
                                                                                          ^
io.cpp:554:79: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = files.begin(); e != files.end(); e++)
                                                                              ^
io.cpp:918:83: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::reverse_iterator e = ls.rbegin(); e != ls.rend(); e++)
                                                                                  ^
level_data.cpp:302:5: warning: Class 'LevelData' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    myloader = new loader;
    ^
level_data.cpp:302:5: warning: Class 'LevelData' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    myloader = new loader;
    ^
level_data.cpp:151:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                e++;
                ^
level_data.cpp:229:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                e++;
                ^
level_data.cpp:280:9: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        e++;
        ^
level_data.cpp:592:83: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<walker*>::iterator e = dead_list.begin(); e != dead_list.end(); e++)
                                                                                  ^
level_data.cpp:1588:3: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  e++;
  ^
level_data.cpp:1632:9: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        e++;
        ^
level_editor.cpp:3312:27: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]
            if(left_state != mymouse.left)
                          ^
level_editor.cpp:3314:33: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]
            else if(right_state != mymouse.right)
                                ^
level_editor.cpp:3340:27: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]
            if(left_state != mymouse.left)
                          ^
level_editor.cpp:3342:33: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]
            else if(right_state != mymouse.right)
                                ^
level_editor.cpp:960:7: warning: Class 'LevelEditorData' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    : campaign(new CampaignData("org.openglad.gladiator")), level(new LevelData(1)), mode(TERRAIN), rect_selecting(false), dragging(false), myradar(myscreen->viewob[0], myscreen, 0)
      ^
level_editor.cpp:960:7: warning: Class 'LevelEditorData' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    : campaign(new CampaignData("org.openglad.gladiator")), level(new LevelData(1)), mode(TERRAIN), rect_selecting(false), dragging(false), myradar(myscreen->viewob[0], myscreen, 0)
      ^
level_editor.cpp:789:5: style: Class 'SelectionInfo' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    SelectionInfo(walker* target)
    ^
level_editor.cpp:3114:25: warning: Either the condition 'if(newob)' is redundant or there is possible null pointer dereference: newob. [nullPointerRedundantCheck]
                        newob->team_num = object_brush.team;
                        ^
level_editor.cpp:3121:32: note: Assuming that condition 'if(newob)' is not redundant
                            if (newob)
                               ^
level_editor.cpp:3114:25: note: Null pointer dereference
                        newob->team_num = object_brush.team;
                        ^
level_editor.cpp:3115:25: warning: Either the condition 'if(newob)' is redundant or there is possible null pointer dereference: newob. [nullPointerRedundantCheck]
                        newob->stats->level = object_brush.level;
                        ^
level_editor.cpp:3121:32: note: Assuming that condition 'if(newob)' is not redundant
                            if (newob)
                               ^
level_editor.cpp:3115:25: note: Null pointer dereference
                        newob->stats->level = object_brush.level;
                        ^
level_editor.cpp:3116:25: warning: Either the condition 'if(newob)' is redundant or there is possible null pointer dereference: newob. [nullPointerRedundantCheck]
                        newob->dead = 0; // just in case
                        ^
level_editor.cpp:3121:32: note: Assuming that condition 'if(newob)' is not redundant
                            if (newob)
                               ^
level_editor.cpp:3116:25: note: Null pointer dereference
                        newob->dead = 0; // just in case
                        ^
level_editor.cpp:3117:25: warning: Either the condition 'if(newob)' is redundant or there is possible null pointer dereference: newob. [nullPointerRedundantCheck]
                        newob->collide_ob = 0;
                        ^
level_editor.cpp:3121:32: note: Assuming that condition 'if(newob)' is not redundant
                            if (newob)
                               ^
level_editor.cpp:3117:25: note: Null pointer dereference
                        newob->collide_ob = 0;
                        ^
level_editor.cpp:2135:34: style: Variable 'selection_rect.w' is reassigned a value before the old one has been used. [redundantAssignment]
                selection_rect.w = worldx - selection_rect.x;
                                 ^
level_editor.cpp:2130:38: note: selection_rect.w is assigned
                    selection_rect.w = 1;
                                     ^
level_editor.cpp:2135:34: note: selection_rect.w is overwritten
                selection_rect.w = worldx - selection_rect.x;
                                 ^
level_editor.cpp:2136:34: style: Variable 'selection_rect.h' is reassigned a value before the old one has been used. [redundantAssignment]
                selection_rect.h = worldy - selection_rect.y;
                                 ^
level_editor.cpp:2131:38: note: selection_rect.h is assigned
                    selection_rect.h = 1;
                                     ^
level_editor.cpp:2136:34: note: selection_rect.h is overwritten
                selection_rect.h = worldy - selection_rect.y;
                                 ^
level_editor.cpp:2795:21: style: The scope of the variable 'h' can be reduced. [variableScope]
                int h;
                    ^
level_editor.cpp:1719:13: style: Local variable 'i' shadows outer variable [shadowVariable]
        int i = 0;
            ^
level_editor.cpp:1676:9: note: Shadowed declaration
 Sint32 i, j; // for loops
        ^
level_editor.cpp:1719:13: note: Shadow variable
        int i = 0;
            ^
level_editor.cpp:2124:23: style: Local variable 'worldx' shadows outer variable [shadowVariable]
                float worldx = mx + level->topx - myscreen->viewob[0]->xloc;
                      ^
level_editor.cpp:2082:20: note: Shadowed declaration
            Sint32 worldx = mx + level->topx - myscreen->viewob[0]->xloc; // - S_LEFT
                   ^
level_editor.cpp:2124:23: note: Shadow variable
                float worldx = mx + level->topx - myscreen->viewob[0]->xloc;
                      ^
level_editor.cpp:2125:23: style: Local variable 'worldy' shadows outer variable [shadowVariable]
                float worldy = my + level->topy - myscreen->viewob[0]->yloc;
                      ^
level_editor.cpp:2083:20: note: Shadowed declaration
            Sint32 worldy = my + level->topy - myscreen->viewob[0]->yloc; // - S_UP
                   ^
level_editor.cpp:2125:23: note: Shadow variable
                float worldy = my + level->topy - myscreen->viewob[0]->yloc;
                      ^
level_editor.cpp:2707:26: style: Local variable 'buf' shadows outer variable [shadowVariable]
                    char buf[40];
                         ^
level_editor.cpp:2694:18: note: Shadowed declaration
            char buf[512];
                 ^
level_editor.cpp:2707:26: note: Shadow variable
                    char buf[40];
                         ^
level_editor.cpp:2809:30: style: Local variable 'buf' shadows outer variable [shadowVariable]
                        char buf[200];
                             ^
level_editor.cpp:2786:18: note: Shadowed declaration
            char buf[20];
                 ^
level_editor.cpp:2809:30: note: Shadow variable
                        char buf[200];
                             ^
level_editor.cpp:2837:34: style: Local variable 'buf' shadows outer variable [shadowVariable]
                            char buf[30];
                                 ^
level_editor.cpp:2786:18: note: Shadowed declaration
            char buf[20];
                 ^
level_editor.cpp:2837:34: note: Shadow variable
                            char buf[30];
                                 ^
level_editor.cpp:3421:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i = 0; i < NUM_FAMILIES; i++)
         ^
level_editor.cpp:3387:9: note: Shadowed declaration
 Sint32 i,j;
        ^
level_editor.cpp:3421:10: note: Shadow variable
 for(int i = 0; i < NUM_FAMILIES; i++)
         ^
level_editor.cpp:3425:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i = 0; i < MAX_TREASURE+1; i++)
         ^
level_editor.cpp:3387:9: note: Shadowed declaration
 Sint32 i,j;
        ^
level_editor.cpp:3425:10: note: Shadow variable
 for(int i = 0; i < MAX_TREASURE+1; i++)
         ^
level_editor.cpp:3429:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i = 0; i < 4; i++)
         ^
level_editor.cpp:3387:9: note: Shadowed declaration
 Sint32 i,j;
        ^
level_editor.cpp:3429:10: note: Shadow variable
 for(int i = 0; i < 4; i++)
         ^
level_editor.cpp:3747:9: style: Local variable 'scroll_amount' shadows outer variable [shadowVariable]
  short scroll_amount = get_and_reset_scroll_amount();
        ^
level_editor.cpp:38:14: note: Shadowed declaration
extern short scroll_amount;  // for scrolling up and down text popups
             ^
level_editor.cpp:3747:9: note: Shadow variable
  short scroll_amount = get_and_reset_scroll_amount();
        ^
level_editor.cpp:1199:86: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
    levelGoalsEnemiesButton.label += (level->type & LevelData::TYPE_CAN_EXIT_WHENEVER? "Off" : "On");
                                                                                     ^
level_editor.cpp:1202:95: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
    levelGoalsGeneratorsButton.label += (level->type & LevelData::TYPE_MUST_DESTROY_GENERATORS? "On" : "Off");
                                                                                              ^
level_editor.cpp:1205:89: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
    levelGoalsNPCsButton.label += (level->type & LevelData::TYPE_MUST_PROTECT_NAMED_NPCS? "On" : "Off");
                                                                                        ^
level_editor.cpp:1468:17: style: Variable 'mymouse' can be declared with const [constVariable]
    MouseState& mymouse = query_mouse_no_poll();
                ^
level_editor.cpp:1502:17: style: Variable 'mymouse' can be declared with const [constVariable]
    MouseState& mymouse = query_mouse_no_poll();
                ^
level_editor.cpp:1519:17: style: Variable 'mymouse' can be declared with const [constVariable]
    MouseState& mymouse = query_mouse_no_poll();
                ^
level_editor.cpp:2077:17: style: Variable 'mymouse' can be declared with const [constVariable]
    MouseState& mymouse = query_mouse_no_poll();
                ^
level_editor.cpp:3381:25: style: Variable 'terrain_brush' can be declared with const [constVariable]
    EditorTerrainBrush& terrain_brush = data.terrain_brush;
                        ^
level_editor.cpp:568:18: style: Variable 'done' is assigned a value that is never used. [unreadVariable]
            done = true;
                 ^
level_editor.cpp:1617:16: style: Variable 'r' is assigned a value that is never used. [unreadVariable]
        Rectf r(selection_rect.x - level->topx + myscreen->viewob[0]->xloc, selection_rect.y - level->topy + myscreen->viewob[0]->yloc, selection_rect.w, selection_rect.h);
               ^
level_editor.cpp:3474:12: style: Variable 'done' is assigned a value that is never used. [unreadVariable]
      done = true;
           ^
level_editor.cpp:254:73: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                        ^
level_editor.cpp:454:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                s++;
                ^
level_editor.cpp:473:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                        s--;
                        ^
level_editor.cpp:584:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                s--;
                ^
level_editor.cpp:597:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                s++;
                ^
level_editor.cpp:615:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                s--;
                ^
level_editor.cpp:631:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                    s++;
                    ^
level_editor.cpp:680:85: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::list<std::string>::iterator e = result.begin(); e != result.end(); e++)
                                                                                    ^
level_editor.cpp:1155:119: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::pair<SimpleButton*, std::set<SimpleButton*> > >::const_iterator e = ls.begin(); e != ls.end(); e++)
                                                                                                                      ^
level_editor.cpp:1167:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(set<SimpleButton*>::const_iterator e = menu_buttons.begin(); e != menu_buttons.end(); e++)
                                                                                              ^
level_editor.cpp:1173:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(set<SimpleButton*>::const_iterator e = mode_buttons.begin(); e != mode_buttons.end(); e++)
                                                                                              ^
level_editor.cpp:1183:139: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::pair<SimpleButton*, std::set<SimpleButton*> > >::const_iterator e = current_menu.begin(); e != current_menu.end(); e++)
                                                                                                                                          ^
level_editor.cpp:1186:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(set<SimpleButton*>::const_iterator f = s.begin(); f != s.end(); f++)
                                                                            ^
level_editor.cpp:1311:99: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                                  ^
level_editor.cpp:1336:99: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                                  ^
level_editor.cpp:1359:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:1375:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:1388:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:1410:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:1432:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:1448:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:1562:83: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::list<int>::const_iterator e = levels.begin(); e != levels.end(); e++)
                                                                                  ^
level_editor.cpp:1585:70: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::set<int>::iterator e = exits.begin(); e != exits.end(); e++)
                                                                     ^
level_editor.cpp:1642:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:1664:89: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(set<SimpleButton*>::iterator e = mode_buttons.begin(); e != mode_buttons.end(); e++)
                                                                                        ^
level_editor.cpp:1671:91: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(set<SimpleButton*>::iterator e = pan_buttons.begin(); e != pan_buttons.end(); e++)
                                                                                          ^
level_editor.cpp:1720:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                              ^
level_editor.cpp:2028:89: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(set<SimpleButton*>::iterator e = menu_buttons.begin(); e != menu_buttons.end(); e++)
                                                                                        ^
level_editor.cpp:2032:118: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(list<pair<SimpleButton*, set<SimpleButton*> > >::iterator e = current_menu.begin(); e != current_menu.end(); e++)
                                                                                                                     ^
level_editor.cpp:2035:71: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(set<SimpleButton*>::iterator f = s.begin(); f != s.end(); f++)
                                                                      ^
level_editor.cpp:2092:98: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                for(vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                                 ^
level_editor.cpp:2107:98: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                for(vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                                 ^
level_editor.cpp:2145:92: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(vector<SelectionInfo>::const_iterator e = selection.begin(); e != selection.end(); e++)
                                                                                           ^
level_editor.cpp:2683:81: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            for(std::list<int>::iterator e = levels.begin(); e != levels.end(); e++)
                                                                                ^
level_editor.cpp:2714:97: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                for(std::list<std::string>::iterator e = problems.begin(); e != problems.end(); e++)
                                                                                                ^
level_editor.cpp:2972:102: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
            for(std::set<SimpleButton*>::iterator e = mode_buttons.begin(); e != mode_buttons.end(); e++)
                                                                                                     ^
level_editor.cpp:3061:119: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                                for(std::vector<SelectionInfo>::iterator e = selection.begin(); e != selection.end(); e++)
                                                                                                                      ^
level_editor.cpp:3484:27: style: Local variable 'event' shadows outer variable [shadowVariable]
                SDL_Event event;
                          ^
level_editor.cpp:3466:12: note: Shadowed declaration
 SDL_Event event;
           ^
level_editor.cpp:3484:27: note: Shadow variable
                SDL_Event event;
                          ^
level_editor.cpp:3496:27: style: Local variable 'event' shadows outer variable [shadowVariable]
                SDL_Event event;
                          ^
level_editor.cpp:3466:12: note: Shadowed declaration
 SDL_Event event;
           ^
level_editor.cpp:3496:27: note: Shadow variable
                SDL_Event event;
                          ^
level_editor.cpp:3703:27: style: Local variable 'event' shadows outer variable [shadowVariable]
                SDL_Event event;
                          ^
level_editor.cpp:3466:12: note: Shadowed declaration
 SDL_Event event;
           ^
level_editor.cpp:3703:27: note: Shadow variable
                SDL_Event event;
                          ^
level_editor.cpp:449:22: style: Variable 'done' is assigned a value that is never used. [unreadVariable]
                done = true;  // Some soft keyboards might disappear anyhow if you press return...
                     ^
level_editor.cpp:505:17: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                s++;
                ^
level_editor.cpp:515:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                    s--;
                    ^
level_editor.cpp:525:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                    s++;
                    ^
level_editor.cpp:540:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                    s--;
                    ^
level_editor.cpp:553:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                        s++;
                        ^
level_picker.cpp:332:37: style: Argument 'screenW-150' to function Sint16 is always 250 [constArgument]
    SDL_Rect prev = {Sint16(screenW - 150), 20, 30, 10};
                                    ^
level_picker.cpp:330:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
level_picker.cpp:332:37: note: Argument 'screenW-150' to function Sint16 is always 250
    SDL_Rect prev = {Sint16(screenW - 150), 20, 30, 10};
                                    ^
level_picker.cpp:333:37: style: Argument 'screenW-150' to function Sint16 is always 250 [constArgument]
    SDL_Rect next = {Sint16(screenW - 150), Sint16(screenH - 50), 30, 10};
                                    ^
level_picker.cpp:330:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
level_picker.cpp:333:37: note: Argument 'screenW-150' to function Sint16 is always 250
    SDL_Rect next = {Sint16(screenW - 150), Sint16(screenH - 50), 30, 10};
                                    ^
level_picker.cpp:333:60: style: Argument 'screenH-50' to function Sint16 is always 250 [constArgument]
    SDL_Rect next = {Sint16(screenW - 150), Sint16(screenH - 50), 30, 10};
                                                           ^
level_picker.cpp:331:22: note: Assignment 'screenH=SCREEN_H', assigned value is 300
    Sint16 screenH = SCREEN_H;
                     ^
level_picker.cpp:333:60: note: Argument 'screenH-50' to function Sint16 is always 250
    SDL_Rect next = {Sint16(screenW - 150), Sint16(screenH - 50), 30, 10};
                                                           ^
level_picker.cpp:336:39: style: Argument 'screenW-50' to function Sint16 is always 350 [constArgument]
    SDL_Rect choose = {Sint16(screenW - 50), Sint16(screenH - 30), 30, 10};
                                      ^
level_picker.cpp:330:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
level_picker.cpp:336:39: note: Argument 'screenW-50' to function Sint16 is always 350
    SDL_Rect choose = {Sint16(screenW - 50), Sint16(screenH - 30), 30, 10};
                                      ^
level_picker.cpp:336:61: style: Argument 'screenH-30' to function Sint16 is always 270 [constArgument]
    SDL_Rect choose = {Sint16(screenW - 50), Sint16(screenH - 30), 30, 10};
                                                            ^
level_picker.cpp:331:22: note: Assignment 'screenH=SCREEN_H', assigned value is 300
    Sint16 screenH = SCREEN_H;
                     ^
level_picker.cpp:336:61: note: Argument 'screenH-30' to function Sint16 is always 270
    SDL_Rect choose = {Sint16(screenW - 50), Sint16(screenH - 30), 30, 10};
                                                            ^
level_picker.cpp:337:39: style: Argument 'screenW-100' to function Sint16 is always 300 [constArgument]
    SDL_Rect cancel = {Sint16(screenW - 100), Sint16(screenH - 30), 38, 10};
                                      ^
level_picker.cpp:330:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
level_picker.cpp:337:39: note: Argument 'screenW-100' to function Sint16 is always 300
    SDL_Rect cancel = {Sint16(screenW - 100), Sint16(screenH - 30), 38, 10};
                                      ^
level_picker.cpp:337:62: style: Argument 'screenH-30' to function Sint16 is always 270 [constArgument]
    SDL_Rect cancel = {Sint16(screenW - 100), Sint16(screenH - 30), 38, 10};
                                                             ^
level_picker.cpp:331:22: note: Assignment 'screenH=SCREEN_H', assigned value is 300
    Sint16 screenH = SCREEN_H;
                     ^
level_picker.cpp:337:62: note: Argument 'screenH-30' to function Sint16 is always 270
    SDL_Rect cancel = {Sint16(screenW - 100), Sint16(screenH - 30), 38, 10};
                                                             ^
level_picker.cpp:338:46: style: Argument 'screenW-50' to function Sint16 is always 350 [constArgument]
    SDL_Rect delete_button = {Sint16(screenW - 50), 10, 38, 10};
                                             ^
level_picker.cpp:330:22: note: Assignment 'screenW=SCREEN_W', assigned value is 400
    Sint16 screenW = SCREEN_W;
                     ^
level_picker.cpp:338:46: note: Argument 'screenW-50' to function Sint16 is always 350
    SDL_Rect delete_button = {Sint16(screenW - 50), 10, 38, 10};
                                             ^
level_picker.cpp:213:113: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = level_data.description.begin(); e != level_data.description.end(); e++)
                                                                                                                ^
level_picker.cpp:264:70: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(list<int>::iterator e = exits.begin(); e != exits.end(); e++)
                                                                     ^
obmap.cpp:250:11: warning: Either the condition '!ob' is redundant or there is possible null pointer dereference: ob. [nullPointerRedundantCheck]
 oxsize = ob->sizex;
          ^
obmap.cpp:256:5: note: Assuming that condition '!ob' is not redundant
 if(!ob)
    ^
obmap.cpp:250:11: note: Null pointer dereference
 oxsize = ob->sizex;
          ^
obmap.cpp:251:11: warning: Either the condition '!ob' is redundant or there is possible null pointer dereference: ob. [nullPointerRedundantCheck]
 oysize = ob->sizey;
          ^
obmap.cpp:256:5: note: Assuming that condition '!ob' is not redundant
 if(!ob)
    ^
obmap.cpp:251:11: note: Null pointer dereference
 oysize = ob->sizey;
          ^
pal32.cpp:143:8: style: The scope of the variable 'tempcol' can be reduced. [variableScope]
 short tempcol;
       ^
pal32.cpp:173:8: style: The scope of the variable 'colorspot' can be reduced. [variableScope]
 short colorspot;
       ^
picker.cpp:1572:22: style: The statement 'if (here!=ourteam[editguy]) here=ourteam[editguy]' is logically equivalent to 'here=ourteam[editguy]'. [duplicateConditionalAssign]
            if (here != ourteam[editguy])
                     ^
picker.cpp:1573:22: note: Assignment 'here=ourteam[editguy]'
                here = ourteam[editguy];
                     ^
picker.cpp:1572:22: note: Condition 'here!=ourteam[editguy]' is redundant
            if (here != ourteam[editguy])
                     ^
picker.cpp:2823:21: warning: Either the condition '!current_guy' is redundant or there is possible null pointer dereference: current_guy. [nullPointerRedundantCheck]
 Sint32 newfamily = current_guy->family;
                    ^
picker.cpp:2831:6: note: Assuming that condition '!current_guy' is not redundant
 if (!current_guy) // we should be adding current_guy
     ^
picker.cpp:2823:21: note: Null pointer dereference
 Sint32 newfamily = current_guy->family;
                    ^
picker.cpp:2705:12: style: Variable 'newfamily' is reassigned a value before the old one has been used. [redundantAssignment]
 newfamily = current_guy->family;
           ^
picker.cpp:2702:13: note: newfamily is assigned
  newfamily = allowable_guys[current_type];
            ^
picker.cpp:2705:12: note: newfamily is overwritten
 newfamily = current_guy->family;
           ^
picker.cpp:2705:12: style: Variable 'newfamily' is reassigned a value before the old one has been used. [redundantAssignment]
 newfamily = current_guy->family;
           ^
picker.cpp:2704:13: note: newfamily is assigned
  newfamily = myscreen->save_data.team_list[editguy]->family;
            ^
picker.cpp:2705:12: note: newfamily is overwritten
 newfamily = current_guy->family;
           ^
picker.cpp:3807:14: style: Redundant initialization for 'templevel'. The initialized value is overwritten before it is read. [redundantInitialization]
   templevel = pick_level(myscreen, myscreen->level_data.id);
             ^
picker.cpp:3805:21: note: templevel is initialized
   Sint32 templevel = myscreen->save_data.scen_num;
                    ^
picker.cpp:3807:14: note: templevel is overwritten
   templevel = pick_level(myscreen, myscreen->level_data.id);
             ^
picker.cpp:1231:16: style: The scope of the variable 'showcolor' can be reduced. [variableScope]
 unsigned char showcolor; // normally STAT_COLOR or STAT_CHANGED
               ^
picker.cpp:1480:8: style: The scope of the variable 'linesdown' can be reduced. [variableScope]
 float linesdown = 0.0f;
       ^
picker.cpp:1918:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j = 0;
        ^
picker.cpp:1920:6: style: The scope of the variable 'dumbcount' can be reduced. [variableScope]
 int dumbcount;
     ^
picker.cpp:2015:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j = 0;
        ^
picker.cpp:2017:6: style: The scope of the variable 'dumbcount' can be reduced. [variableScope]
 int dumbcount;
     ^
picker.cpp:2113:9: style: The scope of the variable 'dumbcount' can be reduced. [variableScope]
    int dumbcount;
        ^
picker.cpp:2116:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j = 0;
        ^
picker.cpp:448:7: style: Local variable 'message' shadows outer variable [shadowVariable]
 char message[30], namecolor, numguys = 0;
      ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:448:7: note: Shadow variable
 char message[30], namecolor, numguys = 0;
      ^
picker.cpp:645:7: style: Local variable 'message' shadows outer variable [shadowVariable]
 char message[80];
      ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:645:7: note: Shadow variable
 char message[80];
      ^
picker.cpp:1786:7: style: Local variable 'message' shadows outer variable [shadowVariable]
 char message[80];
      ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:1786:7: note: Shadow variable
 char message[80];
      ^
picker.cpp:2174:7: style: Local variable 'message' shadows outer variable [shadowVariable]
 char message[80];
      ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:2174:7: note: Shadow variable
 char message[80];
      ^
picker.cpp:3846:9: style: Local variable 'message' shadows outer variable [shadowVariable]
   char message[80];
        ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:3846:9: note: Shadow variable
   char message[80];
        ^
picker.cpp:3866:10: style: Local variable 'message' shadows outer variable [shadowVariable]
   char  message[80];
         ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:3866:10: note: Shadow variable
   char  message[80];
         ^
picker.cpp:3895:10: style: Local variable 'message' shadows outer variable [shadowVariable]
   char  message[80];
         ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:3895:10: note: Shadow variable
   char  message[80];
         ^
picker.cpp:3917:9: style: Local variable 'message' shadows outer variable [shadowVariable]
   char message[80];
        ^
picker.cpp:78:7: note: Shadowed declaration
char  message[80];
      ^
picker.cpp:3917:9: note: Shadow variable
   char message[80];
        ^
picker.cpp:1718:79: style: Argument 'linesdown*line_height' to function Sint32 is always 30 [constArgument]
  SDL_Rect r = {info_box_content.x + 10, info_box_content.y + Sint32(linesdown*line_height) - 2, info_box_content.w - 20, 2};
                                                                              ^
picker.cpp:1690:21: note: Assignment 'linesdown=0', assigned value is 0
        linesdown = 0;
                    ^
picker.cpp:1698:9: note: linesdown is incremented', new value is 1
        linesdown++;
        ^
picker.cpp:1711:9: note: linesdown is incremented', new value is 2
        linesdown++;
        ^
picker.cpp:1716:9: note: linesdown is incremented', new value is 3
        linesdown++;
        ^
picker.cpp:1718:79: note: Argument 'linesdown*line_height' to function Sint32 is always 30
  SDL_Rect r = {info_box_content.x + 10, info_box_content.y + Sint32(linesdown*line_height) - 2, info_box_content.w - 20, 2};
                                                                              ^
picker.cpp:2883:14: style: Variable 'cheatmouse' can be declared with const [constVariable]
 MouseState& cheatmouse = query_mouse();
             ^
picker.cpp:738:8: style: Variable 'arg1' is assigned a value that is never used. [unreadVariable]
  arg1 = 1;
       ^
picker.cpp:987:8: style: Variable 'arg1' is assigned a value that is never used. [unreadVariable]
  arg1 = 1;
       ^
picker.cpp:1480:18: style: Variable 'linesdown' is assigned a value that is never used. [unreadVariable]
 float linesdown = 0.0f;
                 ^
picker.cpp:1495:8: style: Variable 'arg1' is assigned a value that is never used. [unreadVariable]
  arg1 = 1;
       ^
picker.cpp:1789:8: style: Variable 'arg1' is assigned a value that is never used. [unreadVariable]
  arg1 = 1;
       ^
picker.cpp:1918:11: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
    int j = 0;
          ^
picker.cpp:2015:11: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
    int j = 0;
          ^
picker.cpp:2116:11: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
    int j = 0;
          ^
picker.cpp:2177:8: style: Variable 'arg1' is assigned a value that is never used. [unreadVariable]
  arg1 = 1;
       ^
picker.cpp:2886:8: style: Variable 'arg1' is assigned a value that is never used. [unreadVariable]
  arg1 = 1;
       ^
picker.cpp:3061:8: style: Variable 'arg1' is assigned a value that is never used. [unreadVariable]
  arg1 = 1;
       ^
picker.cpp:1350:81: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::list<std::string>::iterator e = desc.begin(); e != desc.end(); e++)
                                                                                ^
picker.cpp:1909:73: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                        ^
picker.cpp:1963:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                            ^
picker.cpp:2006:73: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                        ^
picker.cpp:2060:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                            ^
picker.cpp:2102:73: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                        ^
picker.cpp:2154:77: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::list<std::string>::iterator e = ls.begin(); e != ls.end(); e++)
                                                                            ^
pixie.cpp:47:8: warning: Member variable 'pixie::xpos' is not initialized in the constructor. [uninitMemberVar]
pixie::pixie(const PixieData& data)
       ^
pixie.cpp:47:8: warning: Member variable 'pixie::ypos' is not initialized in the constructor. [uninitMemberVar]
pixie::pixie(const PixieData& data)
       ^
pixie.cpp:47:8: warning: Member variable 'pixie::oldbmp' is not initialized in the constructor. [uninitMemberVar]
pixie::pixie(const PixieData& data)
       ^
pixie.cpp:47:8: warning: Member variable 'pixie::bmp_surface' is not initialized in the constructor. [uninitMemberVar]
pixie::pixie(const PixieData& data)
       ^
pixie.cpp:55:8: warning: Member variable 'pixie::xpos' is not initialized in the constructor. [uninitMemberVar]
pixie::pixie(const PixieData& data, int doaccel)
       ^
pixie.cpp:55:8: warning: Member variable 'pixie::ypos' is not initialized in the constructor. [uninitMemberVar]
pixie::pixie(const PixieData& data, int doaccel)
       ^
pixie.cpp:55:8: warning: Member variable 'pixie::oldbmp' is not initialized in the constructor. [uninitMemberVar]
pixie::pixie(const PixieData& data, int doaccel)
       ^
radar.cpp:41:8: warning: Member variable 'radar::sizex' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::sizey' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::xpos' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::ypos' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::xloc' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::yloc' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::radarx' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::radary' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::oldbmp' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::xview' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::yview' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
radar.cpp:41:8: warning: Member variable 'radar::size' is not initialized in the constructor. [uninitMemberVar]
radar::radar(viewscreen * myview, screen * myscreen, short whatnum)
       ^
results_screen.cpp:103:9: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
        after = NULL;
        ^
results_screen.cpp:562:37: style: The if condition is the same as the previous if condition [duplicateCondition]
                if(area_inner.y < y && y + 10 < area_inner.y + area_inner.h)
                                    ^
results_screen.cpp:554:37: note: First condition
                if(area_inner.y < y && y + 10 < area_inner.y + area_inner.h)
                                    ^
results_screen.cpp:562:37: note: Second condition
                if(area_inner.y < y && y + 10 < area_inner.y + area_inner.h)
                                    ^
results_screen.cpp:646:24: style: Local variable 'i' shadows outer variable [shadowVariable]
            for(size_t i = 0; i < troops.size(); i++)
                       ^
results_screen.cpp:404:9: note: Shadowed declaration
    int i = 0;
        ^
results_screen.cpp:646:24: note: Shadow variable
            for(size_t i = 0; i < troops.size(); i++)
                       ^
results_screen.cpp:751:17: style: Local variable 'i' shadows outer variable [shadowVariable]
        for(int i = 0; i < num_buttons; i++)
                ^
results_screen.cpp:404:9: note: Shadowed declaration
    int i = 0;
        ^
results_screen.cpp:751:17: note: Shadow variable
        for(int i = 0; i < num_buttons; i++)
                ^
results_screen.cpp:329:15: style: Variable 'save_data' can be declared with const [constVariable]
    SaveData& save_data = myscreen->save_data;
              ^
results_screen.cpp:370:78: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::map<int, guy*>::iterator e = before.begin(); e != before.end(); e++)
                                                                             ^
results_screen.cpp:377:79: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::map<int, walker*>::iterator e = after.begin(); e != after.end(); e++)
                                                                              ^
results_screen.cpp:385:83: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::vector<TroopResult>::iterator e = troops.begin(); e != troops.end(); e++)
                                                                                  ^
results_screen.cpp:405:83: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
    for(std::vector<TroopResult>::iterator e = troops.begin(); e != troops.end(); e++)
                                                                                  ^
results_screen.cpp:612:91: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                for(std::vector<int>::iterator e = recruits.begin(); e != recruits.end(); e++)
                                                                                          ^
results_screen.cpp:630:87: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                for(std::vector<int>::iterator e = losses.begin(); e != losses.end(); e++)
                                                                                      ^
results_screen.cpp:722:107: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
                        for(std::vector<std::string>::iterator e = specials.begin(); e != specials.end(); e++)
                                                                                                          ^
sai2x.cpp:706:8: style: Condition 'fullscreen' is always true [knownConditionTrueFalse]
    if(fullscreen)
       ^
sai2x.cpp:699:18: note: Assignment 'fullscreen=true', assigned value is 1
    fullscreen = true;
                 ^
sai2x.cpp:706:8: note: Condition 'fullscreen' is always true
    if(fullscreen)
       ^
save_data.cpp:105:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 short i;
       ^
save_data.cpp:180:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i = 0; i < team_size; i++)
         ^
save_data.cpp:105:8: note: Shadowed declaration
 short i;
       ^
save_data.cpp:180:10: note: Shadow variable
 for(int i = 0; i < team_size; i++)
         ^
save_data.cpp:275:13: style: Local variable 'i' shadows outer variable [shadowVariable]
    for(int i = 0; i < listsize; i++)
            ^
save_data.cpp:105:8: note: Shadowed declaration
 short i;
       ^
save_data.cpp:275:13: note: Shadow variable
    for(int i = 0; i < listsize; i++)
            ^
save_data.cpp:368:17: style: Local variable 'i' shadows outer variable [shadowVariable]
        for(int i = 0; i < 500; i++)
                ^
save_data.cpp:105:8: note: Shadowed declaration
 short i;
       ^
save_data.cpp:368:17: note: Shadow variable
        for(int i = 0; i < 500; i++)
                ^
save_data.cpp:381:17: style: Local variable 'i' shadows outer variable [shadowVariable]
        for(int i = 0; i < num_campaigns; i++)
                ^
save_data.cpp:105:8: note: Shadowed declaration
 short i;
       ^
save_data.cpp:381:17: note: Shadow variable
        for(int i = 0; i < num_campaigns; i++)
                ^
save_data.cpp:595:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i = 0; i < team_size; i++)
         ^
save_data.cpp:467:8: note: Shadowed declaration
 short i;
       ^
save_data.cpp:595:10: note: Shadow variable
 for(int i = 0; i < team_size; i++)
         ^
save_data.cpp:660:119: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
 for(std::map<std::string, std::set<int> >::const_iterator e = completed_levels.begin(); e != completed_levels.end(); e++)
                                                                                                                      ^
save_data.cpp:677:88: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        for(std::set<int>::const_iterator f = e->second.begin(); f != e->second.end(); f++)
                                                                                       ^
screen.cpp:151:5: warning: Class 'screen' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    soundp = new soundob();
    ^
screen.cpp:151:5: warning: Class 'screen' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    soundp = new soundob();
    ^
screen.cpp:685:9: style: Condition 'ob' is always true [knownConditionTrueFalse]
    if (ob && !ob->dead)
        ^
screen.cpp:680:8: note: Assuming that condition 'ob' is not redundant
   if (ob && !ob->dead)
       ^
screen.cpp:685:9: note: Condition 'ob' is always true
    if (ob && !ob->dead)
        ^
screen.cpp:729:8: style: Condition 'ob' is always true [knownConditionTrueFalse]
   if (ob && !ob->dead)
       ^
screen.cpp:726:7: note: Assuming that condition 'ob' is not redundant
  if (ob && !ob->dead)
      ^
screen.cpp:729:8: note: Condition 'ob' is always true
   if (ob && !ob->dead)
       ^
screen.cpp:1138:11: warning: Redundant assignment of 'howmany' to itself. [selfAssignment]
  howmany = howmany;
          ^
screen.cpp:909:29: style: Variable 'allbonuscash' is assigned a value that is never used. [unreadVariable]
        Uint32 allbonuscash = 0;
                            ^
screen.cpp:921:17: style: Variable 'allbonuscash' is assigned a value that is never used. [unreadVariable]
   allbonuscash += bonuscash[i];
                ^
screen.cpp:927:17: style: Variable 'allbonuscash' is assigned a value that is never used. [unreadVariable]
   allbonuscash = 0;
                ^
screen.cpp:952:12: style: Variable 'loop' is assigned a value that is never used. [unreadVariable]
 short loop=0;
           ^
screen.cpp:1138:11: style: Variable 'howmany' is assigned a value that is never used. [unreadVariable]
  howmany = howmany;
          ^
screen.cpp:1378:7: style: Unused variable: memreport [unusedVariable]
 char memreport[80];
      ^
sound.cpp:189:14: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]
 if (silence == silent)      // Are we already set this way?
             ^
sound.cpp:39:10: warning: Member variable 'soundob::baseio' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob()
         ^
sound.cpp:39:10: warning: Member variable 'soundob::irq' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob()
         ^
sound.cpp:39:10: warning: Member variable 'soundob::dma' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob()
         ^
sound.cpp:39:10: warning: Member variable 'soundob::dma16' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob()
         ^
sound.cpp:51:10: warning: Member variable 'soundob::baseio' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob(bool silent)
         ^
sound.cpp:51:10: warning: Member variable 'soundob::irq' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob(bool silent)
         ^
sound.cpp:51:10: warning: Member variable 'soundob::dma' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob(bool silent)
         ^
sound.cpp:51:10: warning: Member variable 'soundob::dma16' is not initialized in the constructor. [uninitMemberVar]
soundob::soundob(bool silent)
         ^
stats.cpp:706:9: style: Redundant initialization for 'mystep'. The initialized value is overwritten before it is read. [redundantInitialization]
 mystep = CHECK_STEP_SIZE;
        ^
stats.cpp:704:15: note: mystep is initialized
 float mystep = controller->stepsize;
              ^
stats.cpp:706:9: note: mystep is overwritten
 mystep = CHECK_STEP_SIZE;
        ^
stats.cpp:756:9: style: Redundant initialization for 'mystep'. The initialized value is overwritten before it is read. [redundantInitialization]
 mystep = CHECK_STEP_SIZE;
        ^
stats.cpp:754:15: note: mystep is initialized
 float mystep = controller->stepsize;
              ^
stats.cpp:756:9: note: mystep is overwritten
 mystep = CHECK_STEP_SIZE;
        ^
stats.cpp:789:9: style: Redundant initialization for 'mystep'. The initialized value is overwritten before it is read. [redundantInitialization]
 mystep = CHECK_STEP_SIZE;
        ^
stats.cpp:787:15: note: mystep is initialized
 float mystep = controller->stepsize;
              ^
stats.cpp:789:9: note: mystep is overwritten
 mystep = CHECK_STEP_SIZE;
        ^
stats.cpp:204:11: style: The scope of the variable 'target' can be reduced. [variableScope]
 walker * target;
          ^
stats.cpp:641:7: style: The scope of the variable 'message' can be reduced. [variableScope]
 char message[80];
      ^
stats.cpp:1102:8: style: The scope of the variable 'xdest' can be reduced. [variableScope]
 float xdest, ydest;
       ^
stats.cpp:1102:15: style: The scope of the variable 'ydest' can be reduced. [variableScope]
 float xdest, ydest;
              ^
stats.cpp:1103:8: style: The scope of the variable 'xdelta' can be reduced. [variableScope]
 float xdelta, ydelta;
       ^
stats.cpp:1103:16: style: The scope of the variable 'ydelta' can be reduced. [variableScope]
 float xdelta, ydelta;
               ^
text.cpp:479:22: warning: Either the condition 'begin' is redundant or there is possible null pointer dereference: begin. [nullPointerRedundantCheck]
 strcpy(firststring, begin); // default case
                     ^
text.cpp:475:6: note: Assuming that condition 'begin' is not redundant
 if (begin)
     ^
text.cpp:479:22: note: Null pointer dereference
 strcpy(firststring, begin); // default case
                     ^
text.cpp:482:13: warning: Either the condition 'begin' is redundant or there is possible null pointer dereference: begin. [nullPointerRedundantCheck]
 if (strlen(begin))
            ^
text.cpp:475:6: note: Assuming that condition 'begin' is not redundant
 if (begin)
     ^
text.cpp:482:13: note: Null pointer dereference
 if (strlen(begin))
            ^
text.cpp:623:22: warning: Either the condition 'begin' is redundant or there is possible null pointer dereference: begin. [nullPointerRedundantCheck]
 strcpy(firststring, begin); // default case
                     ^
text.cpp:619:6: note: Assuming that condition 'begin' is not redundant
 if (begin)
     ^
text.cpp:623:22: note: Null pointer dereference
 strcpy(firststring, begin); // default case
                     ^
text.cpp:626:13: warning: Either the condition 'begin' is redundant or there is possible null pointer dereference: begin. [nullPointerRedundantCheck]
 if (strlen(begin))
            ^
text.cpp:619:6: note: Assuming that condition 'begin' is not redundant
 if (begin)
     ^
text.cpp:626:13: note: Null pointer dereference
 if (strlen(begin))
            ^
text.cpp:205:17: style: The scope of the variable 'width' can be reduced. [variableScope]
 unsigned short width;
                ^
text.cpp:243:17: style: The scope of the variable 'width' can be reduced. [variableScope]
 unsigned short width;
                ^
text.cpp:467:6: style: The scope of the variable 'tempchar' can be reduced. [variableScope]
 int tempchar;
     ^
text.cpp:611:6: style: The scope of the variable 'tempchar' can be reduced. [variableScope]
 int tempchar;
     ^
text.cpp:559:21: style: Local variable 'i' shadows outer variable [shadowVariable]
                int i;
                    ^
text.cpp:463:24: note: Shadowed declaration
 short current_length, i;
                       ^
text.cpp:559:21: note: Shadow variable
                int i;
                    ^
text.cpp:704:21: style: Local variable 'i' shadows outer variable [shadowVariable]
                int i;
                    ^
text.cpp:607:24: note: Shadowed declaration
 short current_length, i;
                       ^
text.cpp:704:21: note: Shadow variable
                int i;
                    ^
text.cpp:232:9: style: Variable 'width' is assigned a value that is never used. [unreadVariable]
  width -= width%4;
        ^
text.cpp:233:9: style: Variable 'width' is assigned a value that is never used. [unreadVariable]
  width +=4;
        ^
text.cpp:255:9: style: Variable 'width' is assigned a value that is never used. [unreadVariable]
  width -= width%4;
        ^
text.cpp:256:9: style: Variable 'width' is assigned a value that is never used. [unreadVariable]
  width +=4;
        ^
text.cpp:496:18: style: Variable 'tempchar' is assigned a value that is never used. [unreadVariable]
        tempchar = 0;
                 ^
text.cpp:641:18: style: Variable 'tempchar' is assigned a value that is never used. [unreadVariable]
        tempchar = 0;
                 ^
treasure.cpp:175:14: style: Variable 'leftside' is assigned a value that is never used. [unreadVariable]
   leftside  = 160 - ( (strlen(exitname) + 18) * 3);
             ^
treasure.cpp:176:14: style: Variable 'rightside' is assigned a value that is never used. [unreadVariable]
   rightside = 160 + ( (strlen(exitname) + 18) * 3);
             ^
treasure.cpp:186:14: style: Variable 'leftside' is assigned a value that is never used. [unreadVariable]
    leftside -= 12;
             ^
treasure.cpp:187:15: style: Variable 'rightside' is assigned a value that is never used. [unreadVariable]
    rightside += 12;
              ^
video.cpp:38:8: warning: Member variable 'video::dospalette' is not initialized in the constructor. [uninitMemberVar]
video::video()
       ^
video.cpp:38:8: warning: Member variable 'video::videobuffer' is not initialized in the constructor. [uninitMemberVar]
video::video()
       ^
video.cpp:38:8: warning: Member variable 'video::cyclemode' is not initialized in the constructor. [uninitMemberVar]
video::video()
       ^
video.cpp:38:8: warning: Member variable 'video::window' is not initialized in the constructor. [uninitMemberVar]
video::video()
       ^
video.cpp:38:8: warning: Member variable 'video::screen_width' is not initialized in the constructor. [uninitMemberVar]
video::video()
       ^
video.cpp:38:8: warning: Member variable 'video::screen_height' is not initialized in the constructor. [uninitMemberVar]
video::video()
       ^
video.cpp:38:8: warning: Member variable 'video::pdouble' is not initialized in the constructor. [uninitMemberVar]
video::video()
       ^
video.cpp:501:21: style: Redundant initialization for 'pix'. The initialized value is overwritten before it is read. [redundantInitialization]
                pix = (Uint8 *)surface->pixels + y * surface->pitch + x*3;
                    ^
video.cpp:490:24: note: pix is initialized
            Uint8 *pix = (Uint8 *)surface->pixels + y * surface->pitch + x*3;
                       ^
video.cpp:501:21: note: pix is overwritten
                pix = (Uint8 *)surface->pixels + y * surface->pitch + x*3;
                    ^
video.cpp:455:24: style: Local variable 'pixel' shadows outer variable [shadowVariable]
                Uint8 *pixel = (Uint8 *)surface->pixels + y*surface->pitch + x;
                       ^
video.cpp:450:13: note: Shadowed declaration
    Uint32* pixel;
            ^
video.cpp:455:24: note: Shadow variable
                Uint8 *pixel = (Uint8 *)surface->pixels + y*surface->pitch + x;
                       ^
video.cpp:475:25: style: Local variable 'pixel' shadows outer variable [shadowVariable]
                Uint16 *pixel = (Uint16 *)surface->pixels + y*surface->pitch/2 + x;
                        ^
video.cpp:450:13: note: Shadowed declaration
    Uint32* pixel;
            ^
video.cpp:475:25: note: Shadow variable
                Uint16 *pixel = (Uint16 *)surface->pixels + y*surface->pitch/2 + x;
                        ^
video.cpp:925:5: style: Variable 'num' is assigned a value that is never used. [unreadVariable]
 num=0;
    ^
video.cpp:981:5: style: Variable 'num' is assigned a value that is never used. [unreadVariable]
 num=0;
    ^
video.cpp:1343:42: style: Variable 'curcolor' is assigned a value that is never used. [unreadVariable]
                                curcolor = (unsigned char) (teamcolor+(255-curcolor));
                                         ^
view.cpp:1069:24: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
 while (strlen(textlist[i]) && i < MAX_MESSAGES)
                       ^
view.cpp:1871:10: warning: Member variable 'options::keys' is not initialized in the constructor. [uninitMemberVar]
options::options()
         ^
view.cpp:148:2: performance: Variable 'gamma' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 gamma = 0;
 ^
view.cpp:168:2: warning: Class 'viewscreen' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
 myradar = new radar(this, myscreen, mynum);
 ^
view.cpp:168:2: warning: Class 'viewscreen' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
 myradar = new radar(this, myscreen, mynum);
 ^
view.cpp:352:14: style: The scope of the variable 'somemessage' can be reduced. [variableScope]
 static char somemessage[80];
             ^
view.cpp:358:15: style: The scope of the variable 'changedteam' can be reduced. [variableScope]
 static short changedteam[6] = {0, 0, 0, 0, 0, 0};  // for switching team
              ^
view.cpp:361:10: style: The scope of the variable 'newob' can be reduced. [variableScope]
 walker *newob; // for general-purpose use
         ^
view.cpp:205:13: style: Variable 'gridp' can be declared with const [constVariable]
 PixieData& gridp = myscreen->level_data.grid;
            ^
view.cpp:262:13: style: Variable 'gridp' can be declared with const [constVariable]
 PixieData& gridp = data->grid;
            ^
walker.cpp:51:2: warning: Class 'walker' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
 stats = new statistics(this);
 ^
walker.cpp:51:2: warning: Class 'walker' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
 stats = new statistics(this);
 ^
walker.cpp:4054:15: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
           && (distance = distance_to_ob(ob) > 64) )
              ^
walker.cpp:2046:19: style: Condition 'playerteam>-1' is always true [knownConditionTrueFalse]
   if (playerteam > -1)
                  ^
walker.cpp:2025:15: note: Assignment 'playerteam=0', assigned value is 0
 playerteam = 0;
              ^
walker.cpp:2046:19: note: Condition 'playerteam>-1' is always true
   if (playerteam > -1)
                  ^
walker.cpp:2869:11: style: Condition '!generic' is always true [knownConditionTrueFalse]
      if (!generic) // didn't remove a marker, so place one
          ^
walker.cpp:2868:17: note: Assignment 'generic=0', assigned value is 0
      generic = 0; // force new placement, for now
                ^
walker.cpp:2869:11: note: Condition '!generic' is always true
      if (!generic) // didn't remove a marker, so place one
          ^
walker.cpp:3707:15: style: C-style pointer casting [cstyleCast]
     fireob = (weap*) fire();
              ^
walker.cpp:3712:15: style: C-style pointer casting [cstyleCast]
     fireob = (weap*) fire();
              ^
walker.cpp:3722:16: style: C-style pointer casting [cstyleCast]
      fireob = (weap*) fire();
               ^
walker.cpp:3736:16: style: C-style pointer casting [cstyleCast]
      fireob = (weap*) fire();
               ^
walker.cpp:3750:16: style: C-style pointer casting [cstyleCast]
      fireob = (weap*) fire();
               ^
walker.cpp:3125:15: style: Variable 'generic' is reassigned a value before the old one has been used. [redundantAssignment]
      generic = stats->magicpoints - stats->special_cost[(int)current_special];
              ^
walker.cpp:3102:17: note: generic is assigned
        generic = 1;
                ^
walker.cpp:3125:15: note: generic is overwritten
      generic = stats->magicpoints - stats->special_cost[(int)current_special];
              ^
walker.cpp:3970:6: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
     break; // end of tunnel case
     ^
walker.cpp:313:8: style: The scope of the variable 'ret1' can be reduced. [variableScope]
 short ret1 = 0, ret2 = 0;
       ^
walker.cpp:313:18: style: The scope of the variable 'ret2' can be reduced. [variableScope]
 short ret1 = 0, ret2 = 0;
                 ^
walker.cpp:320:8: style: The scope of the variable 'mycycle' can be reduced. [variableScope]
 short mycycle;
       ^
walker.cpp:400:22: style: The scope of the variable 'gotup' can be reduced. [variableScope]
                bool gotup = false, gotover = false;
                     ^
walker.cpp:400:37: style: The scope of the variable 'gotover' can be reduced. [variableScope]
                bool gotup = false, gotover = false;
                                    ^
walker.cpp:1533:8: style: The scope of the variable 'temp' can be reduced. [variableScope]
 short temp;
       ^
walker.cpp:1882:11: style: The scope of the variable 'blood' can be reduced. [variableScope]
 walker  *blood; // temporary stain
          ^
walker.cpp:1885:7: style: The scope of the variable 'message' can be reduced. [variableScope]
 char message[80];
      ^
walker.cpp:1891:15: style: The scope of the variable 'tom' can be reduced. [variableScope]
 static short tom = 0;
              ^
walker.cpp:2168:12: style: The scope of the variable 'newob' can be reduced. [variableScope]
 walker  * newob;
           ^
walker.cpp:2362:20: style: The scope of the variable 'tempwalk' can be reduced. [variableScope]
 walker  * alive, *tempwalk;
                   ^
walker.cpp:2401:12: style: Variable 'tempx' is assigned a value that is never used. [unreadVariable]
     tempx = lastx;
           ^
walker.cpp:2402:12: style: Variable 'tempy' is assigned a value that is never used. [unreadVariable]
     tempy = lasty;
           ^
walker.cpp:2473:12: style: Variable 'tempx' is assigned a value that is never used. [unreadVariable]
     tempx = lastx;
           ^
walker.cpp:2474:12: style: Variable 'tempy' is assigned a value that is never used. [unreadVariable]
     tempy = lasty;
           ^
walker.cpp:4157:13: style: Variable 'xdir' is assigned a value that is never used. [unreadVariable]
 short xdir = 0;
            ^
walker.cpp:4158:13: style: Variable 'ydir' is assigned a value that is never used. [unreadVariable]
 short ydir = 0;
            ^
walker.cpp:4210:8: style: Variable 'xdir' is assigned a value that is never used. [unreadVariable]
  xdir = xdelta / abs(xdelta);
       ^
walker.cpp:4213:8: style: Variable 'ydir' is assigned a value that is never used. [unreadVariable]
  ydir = ydelta / abs(ydelta);
       ^
walker.cpp:1525:9: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
        e++;
        ^
weap.cpp:27:2: performance: Variable 'do_bounce' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
 do_bounce = 0; // don't normally bounce :)
 ^
weap.cpp:37:14: style: The scope of the variable 'message' can be reduced. [variableScope]
 static char message[80];
             ^
walker.cpp:1409:0: style: The function 'AdjacentCost' is never used. [unusedFunction]

^
OuyaController.cpp:410:0: style: The function 'Java_com_dinomage_openglad_Openglad_OuyaControllerGenericMotionEvent' is never used. [unusedFunction]

^
OuyaController.cpp:394:0: style: The function 'Java_com_dinomage_openglad_Openglad_OuyaControllerKeyDown' is never used. [unusedFunction]

^
OuyaController.cpp:402:0: style: The function 'Java_com_dinomage_openglad_Openglad_OuyaControllerKeyUp' is never used. [unusedFunction]

^
walker.cpp:1397:0: style: The function 'LeastCostEstimate' is never used. [unusedFunction]

^
walker.cpp:1454:0: style: The function 'PrintStateInfo' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

